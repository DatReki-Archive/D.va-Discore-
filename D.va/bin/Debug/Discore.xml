<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Discore</name>
    </assembly>
    <members>
        <member name="T:Discore.DiscordApiDataType">
            <summary>
            A value representing the type of value a DiscordApiData object represents.
            </summary>
        </member>
        <member name="F:Discore.DiscordApiDataType.Value">
            <summary>
            The DiscordApiData represents a single value.
            </summary>
        </member>
        <member name="F:Discore.DiscordApiDataType.Array">
            <summary>
            The DiscordApiData represents an array of DiscordApiData objects.
            </summary>
        </member>
        <member name="F:Discore.DiscordApiDataType.Container">
            <summary>
            The DiscordApiData represents a container for nested DiscordApiData objects.
            </summary>
        </member>
        <member name="T:Discore.DiscordApiData">
            <summary>
            A piece of data in the Discord API.
            </summary>
        </member>
        <member name="P:Discore.DiscordApiData.Type">
            <summary>
            The type of data this DiscordApiData represents.
            </summary>
        </member>
        <member name="P:Discore.DiscordApiData.Properties">
            <summary>
            If a container type, contains all properties in this DiscordApiData container.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="P:Discore.DiscordApiData.Value">
            <summary>
            If a value type, contains the stored value of this DiscordApiData.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a value.</exception>
        </member>
        <member name="P:Discore.DiscordApiData.Values">
            <summary>
            If an array type, contains the stored list of DiscordApiData objects.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not an array.</exception>
        </member>
        <member name="P:Discore.DiscordApiData.Entries">
            <summary>
            If a container type, gets all stored entries.
            </summary>
        </member>
        <member name="P:Discore.DiscordApiData.IsNull">
            <summary>
            Gets whether the stored data is null.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.#ctor(Discore.DiscordApiDataType)">
            <summary>
            Creates a new DiscordApiData object of the specified type.
            </summary>
            <param name="type">The type of api data to store.</param>
        </member>
        <member name="M:Discore.DiscordApiData.#ctor">
            <summary>
            Creates a new container type DiscordApiData object.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.#ctor(System.Object)">
            <summary>
            Creates a new value type DiscordApiData object.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.#ctor(Discore.Snowflake)">
            <summary>
            Creates a new value type DiscordApiData object.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.#ctor(System.Collections.Generic.IList{Discore.DiscordApiData})">
            <summary>
            Creates a new array type DiscordApiData object.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.ToBoolean">
            <summary>
            If a value type, returns this data as a boolean.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.ToInteger">
            <summary>
            If a value type, returns this data as an integer.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.ToInt64">
            <summary>
            If a value type, returns this data as an int64.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.ToUInt64">
            <summary>
            If a value type, returns this data as an uint64.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.ToDouble">
            <summary>
            If a value type, returns this data as a double floating-point number.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.ToDateTime">
            <summary>
            If a value type, returns this data as a datetime object.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.ToSnowflake">
            <summary>
            If a value type, returns this data as a unsigned 64-bit snowflake.
            </summary>
            <remarks>
            This is not the same as .ToUInt64 as the snowflake is originally
            stored as a string by the Discord Api.
            </remarks>
        </member>
        <member name="M:Discore.DiscordApiData.ToString">
            <summary>
            If a value type, returns this data as a string.
            Otherwise defaults to object.ToString().
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.ContainsKey(System.String)">
            <summary>
            If a container type, returns whether this container contains the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.Get(System.String)">
            <summary>
            If a container type, gets the api data at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetObject(System.String)">
            <summary>
            If a container type, gets the object at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetString(System.String)">
            <summary>
            If a container type, gets the string at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetBoolean(System.String)">
            <summary>
            If a container type, gets the boolean at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetInteger(System.String)">
            <summary>
            If a container type, gets the integer at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetInt64(System.String)">
            <summary>
            If a container type, gets the int64 at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetUInt64(System.String)">
            <summary>
            If a container type, gets the uint64 at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetDouble(System.String)">
            <summary>
            If a container type, gets the double floating-point number at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetDateTime(System.String)">
            <summary>
            If a container type, gets the datetime at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetSnowflake(System.String)">
            <summary>
            If a container type, gets the snowflake at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetArray(System.String)">
            <summary>
            If a container type, gets the array at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.GetColor(System.String)">
            <summary>
            If a container type, gets the DiscordColor at the given key.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.Set(System.String,System.Object)">
            <summary>
            Sets a value in this api data container.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.SetSnowflake(System.String,Discore.Snowflake)">
            <summary>
            Sets a snowflake value in this api data container.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.SetSnowflake(System.String,System.Nullable{Discore.Snowflake})">
            <summary>
            Sets a snowflake value in this api data container.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.Set(System.String,Discore.DiscordApiData)">
            <summary>
            Sets a value in this api data container.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.Set(System.String,Discore.DiscordColor)">
            <summary>
            Sets a DiscordColor value in this api data container.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.Set(System.String,System.Nullable{Discore.DiscordColor})">
            <summary>
            Sets a DiscordColor value in this api data container.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.Set``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Sets a value in this api data container.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.SetAt(System.String,System.Object)">
            <summary>
            Sets a value at the end of the given path.
            The path will be created if it does not exist.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.Locate(System.String)">
            <summary>
            If a container type,
            attempts to locate the api data at the end of the given path.
            <para>
            For example:
            Locate("someContainer.someOtherContainer.someValue")
            would retrieve the DiscordApiData at "someValue" inside of the container "someOtherContainer"
            if it exists.
            </para>
            </summary>
            <param name="path">A dot seperated path to the value.</param>
        </member>
        <member name="M:Discore.DiscordApiData.LocateString(System.String)">
            <summary>
            If a container type,
            attempts to locate the string at the end of the given path.
            </summary>
            <see cref="M:Discore.DiscordApiData.Locate(System.String)"/>
            <param name="path">A dot seperated path to the string.</param>
        </member>
        <member name="M:Discore.DiscordApiData.LocateBoolean(System.String)">
            <summary>
            If a container type,
            attempts to locate the boolean at the end of the given path.
            </summary>
            <see cref="M:Discore.DiscordApiData.Locate(System.String)"/>
            <param name="path">A dot seperated path to the boolean.</param>
        </member>
        <member name="M:Discore.DiscordApiData.LocateInteger(System.String)">
            <summary>
            If a container type,
            attempts to locate the integer at the end of the given path.
            </summary>
            <see cref="M:Discore.DiscordApiData.Locate(System.String)"/>
            <param name="path">A dot seperated path to the integer.</param>
        </member>
        <member name="M:Discore.DiscordApiData.LocateInt64(System.String)">
            <summary>
            If a container type,
            attempts to locate the int64 at the end of the given path.
            </summary>
            <see cref="M:Discore.DiscordApiData.Locate(System.String)"/>
            <param name="path">A dot seperated path to the int64.</param>
        </member>
        <member name="M:Discore.DiscordApiData.LocateUInt64(System.String)">
            <summary>
            If a container type,
            attempts to locate the uint64 at the end of the given path.
            </summary>
            <see cref="M:Discore.DiscordApiData.Locate(System.String)"/>
            <param name="path">A dot seperated path to the uint64.</param>
        </member>
        <member name="M:Discore.DiscordApiData.LocateDouble(System.String)">
            <summary>
            If a container type,
            attempts to locate the double floating-point number at the end of the given path.
            </summary>
            <see cref="M:Discore.DiscordApiData.Locate(System.String)"/>
            <param name="path">A dot seperated path to the double floating-point number.</param>
        </member>
        <member name="M:Discore.DiscordApiData.LocateDateTime(System.String)">
            <summary>
            If a container type,
            attempts to locate the datetime at the end of the given path.
            </summary>
            <see cref="M:Discore.DiscordApiData.Locate(System.String)"/>
            <param name="path">A dot seperated path to the datetime.</param>
        </member>
        <member name="M:Discore.DiscordApiData.LocateSnowflake(System.String)">
            <summary>
            If a container type,
            attempts to locate the snowflake at the end of the given path.
            </summary>
            <see cref="M:Discore.DiscordApiData.Locate(System.String)"/>
            <param name="path">A dot seperated path to the snowflake.</param>
        </member>
        <member name="M:Discore.DiscordApiData.LocateArray(System.String)">
            <summary>
            If a container type,
            attempts to locate the array at the end of the given path.
            </summary>
            <see cref="M:Discore.DiscordApiData.Locate(System.String)"/>
            <param name="path">A dot seperated path to the array.</param>
        </member>
        <member name="M:Discore.DiscordApiData.OverwriteUpdate(Discore.DiscordApiData)">
            <summary>
            Updates this data with the specified data, overwriting any conflicts with the new data.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this data or the given data is not a container.</exception>
        </member>
        <member name="M:Discore.DiscordApiData.CreateValue">
            <summary>
            Creates a new value-type <see cref="T:Discore.DiscordApiData"/>.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.CreateContainer">
            <summary>
            Creates a new container-type <see cref="T:Discore.DiscordApiData"/>.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.CreateArray">
            <summary>
            Creates a new array-type <see cref="T:Discore.DiscordApiData"/>.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.SerializeToJson">
            <summary>
            Serializes this api data object to a JSON string.
            </summary>
        </member>
        <member name="M:Discore.DiscordApiData.TryParseJson(System.String,Discore.DiscordApiData@)">
            <summary>
            Attempts to create a DiscordApiData object from a JSON string.
            </summary>
            <returns>Returns whether the conversion was successful.</returns>
        </member>
        <member name="M:Discore.DiscordApiData.ParseJson(System.String)">
            <summary>
            Creates a DiscordApiData object from a JSON string.
            </summary>
        </member>
        <member name="P:Discore.DiscordAttachment.FileName">
            <summary>
            Gets the file name of the attachment.
            </summary>
        </member>
        <member name="P:Discore.DiscordAttachment.Size">
            <summary>
            Gets the byte file-size of the attachment.
            </summary>
        </member>
        <member name="P:Discore.DiscordAttachment.Url">
            <summary>
            Gets the url of this attachment.
            </summary>
        </member>
        <member name="P:Discore.DiscordAttachment.ProxyUrl">
            <summary>
            Gets the proxy url of this attachment.
            </summary>
        </member>
        <member name="P:Discore.DiscordAttachment.Width">
            <summary>
            Gets the pixel-width of this attachment.
            </summary>
        </member>
        <member name="P:Discore.DiscordAttachment.Height">
            <summary>
            Gets the pixel-height of this attachment.
            </summary>
        </member>
        <member name="T:Discore.DiscordCdnUrl">
            <summary>
            A URL builder for Discord CDN resources.
            </summary>
        </member>
        <member name="F:Discore.DiscordCdnUrl.CdnBaseUrl">
            <summary>
            The base URL for all Discord CDN resources.
            </summary>
        </member>
        <member name="P:Discore.DiscordCdnUrl.Type">
            <summary>
            Gets the type of resource this URL is pointing to.
            </summary>
        </member>
        <member name="P:Discore.DiscordCdnUrl.ResourceId">
            <summary>
            Gets the ID of the resource this URL is for (e.g. user ID, guild ID, etc.)
            or null if there is no resource ID (e.g. a default user avatar).
            </summary>
        </member>
        <member name="P:Discore.DiscordCdnUrl.FileName">
            <summary>
            Gets the original file name provided by the API. This is usually
            a hash of the resource.
            </summary>
        </member>
        <member name="M:Discore.DiscordCdnUrl.ForCustomEmoji(Discore.Snowflake)">
            <summary>
            Creates a CDN URL builder for custom emojis.
            </summary>
            <param name="emojiId">The ID of the custom emoji.</param>
        </member>
        <member name="M:Discore.DiscordCdnUrl.ForGuildIcon(Discore.Snowflake,System.String)">
            <summary>
            Creates a CDN URL builder for guild icons.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="iconHash">The icon hash for the guild.</param>
        </member>
        <member name="M:Discore.DiscordCdnUrl.ForGuildSplash(Discore.Snowflake,System.String)">
            <summary>
            Creates a CDN URL builder for guild splashes.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="splashHash">The hash of the splash image for the guild.</param>
        </member>
        <member name="M:Discore.DiscordCdnUrl.ForDefaultUserAvatar(System.String)">
            <summary>
            Creates a CDN URL builder for a default user avatar.
            </summary>
            <param name="userDiscriminator">The original user discriminator.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="userDiscriminator"/> is null.</exception>
            <exception cref="T:System.FormatException">Thrown if <paramref name="userDiscriminator"/> is not a valid integer.</exception>
            <exception cref="T:System.OverflowException">
            Thrown if <paramref name="userDiscriminator"/> represents a number less than <see cref="F:System.Int32.MinValue"/>
            or greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Discore.DiscordCdnUrl.ForUserAvatar(Discore.Snowflake,System.String)">
            <summary>
            Creates a CDN URL builder for a user avatar.
            </summary>
            <param name="userId">The ID of the user.</param>
            <param name="avatarHash">The avatar hash for the user.</param>
        </member>
        <member name="M:Discore.DiscordCdnUrl.ForApplicationIcon(Discore.Snowflake,System.String)">
            <summary>
            Creates a CDN URL builder for an application icon.
            </summary>
            <param name="applicationId">The ID of the application.</param>
            <param name="iconHash">The icon hash for the application.</param>
        </member>
        <member name="M:Discore.DiscordCdnUrl.BuildUrl(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the complete URL with the specified extension and size.
            </summary>
            <param name="ext">The resource file extension (e.g. png, webp, gif, etc.).</param>
            <param name="size">
            <para>An optional pixel size of the resource to return (sets both width and height).</para>
            <para>Note: Must be a power of 2 and be between 16 and 2048.</para>
            </param>
        </member>
        <member name="T:Discore.DiscordCdnUrlType">
            <summary>
            Types of resources available through Discord's CDN.
            </summary>
        </member>
        <member name="T:Discore.DiscordChannel">
            <summary>
            A <see cref="T:Discore.DiscordDMChannel"/> or a <see cref="T:Discore.DiscordGuildChannel"/>.
            </summary>
        </member>
        <member name="P:Discore.DiscordChannel.ChannelType">
            <summary>
            Gets the type of this channel.
            </summary>
        </member>
        <member name="P:Discore.DiscordChannel.IsGuildChannel">
            <summary>
            Gets whether this channel is a guild channel.
            </summary>
        </member>
        <member name="M:Discore.DiscordChannel.Delete">
            <summary>
            Deletes/closes this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/> if this is a guild channel.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="T:Discore.DiscordChannelType">
            <summary>
            The type of a Discord channel.
            </summary>
        </member>
        <member name="T:Discore.DiscordColor">
            <summary>
            A structure representing color data from the Discord API.
            </summary>
        </member>
        <member name="P:Discore.DiscordColor.EmbedDefault">
            <summary>
            The default color used by Discord for embeds.
            </summary>
        </member>
        <member name="F:Discore.DiscordColor.R">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:Discore.DiscordColor.G">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:Discore.DiscordColor.B">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="M:Discore.DiscordColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new <see cref="T:Discore.DiscordColor"/> instance.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:Discore.DiscordColor.ToHexadecimal">
            <summary>
            Packs this <see cref="T:Discore.DiscordColor"/> into an <see cref="T:System.Int32"/> representing a hexadecimal number.
            </summary>
            <returns>Returns the packed color.</returns>
        </member>
        <member name="M:Discore.DiscordColor.FromHexadecimal(System.Int32)">
            <summary>
            Converts an <see cref="T:System.Int32"/> containing a hexadecimal number into a <see cref="T:Discore.DiscordColor"/>.
            </summary>
            <param name="hex">The hexadecimal <see cref="T:System.Int32"/>.</param>
            <returns>Returns the converted color.</returns>
        </member>
        <member name="T:Discore.DiscordDMChannel">
            <summary>
            Direct message channels represent a one-to-one conversation between two users, outside of the scope of guilds.
            </summary>
        </member>
        <member name="P:Discore.DiscordDMChannel.Recipient">
            <summary>
            Gets the user on the other end of this channel.
            </summary>
        </member>
        <member name="M:Discore.DiscordDMChannel.GetLastMessageId">
            <summary>
            Gets the ID of the last message sent in this channel.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException">Thrown if failed to retrieve channel messages.</exception>
        </member>
        <member name="M:Discore.DiscordDMChannel.CreateMessage(System.String)">
            <summary>
            Creates a message in this channel.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            </summary>
            <param name="content">The message text content.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordDMChannel.CreateMessage(Discore.Http.CreateMessageOptions)">
            <summary>
            Creates a message in this channel.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            </summary>
            <param name="details">The details of the message to create.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordDMChannel.CreateMessage(System.IO.Stream,System.String,Discore.Http.CreateMessageOptions)">
            <summary>
            Posts a message with a file attachment.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            </summary>
            <param name="fileData">A stream of the file contents.</param>
            <param name="fileName">The name of the file to use when uploading.</param>
            <param name="details">Optional extra details of the message to create.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordDMChannel.CreateMessage(System.ArraySegment{System.Byte},System.String,Discore.Http.CreateMessageOptions)">
            <summary>
            Posts a message with a file attachment.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            </summary>
            <param name="fileData">The file contents.</param>
            <param name="fileName">The name of the file to use when uploading.</param>
            <param name="details">Optional extra details of the message to create.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordDMChannel.BulkDeleteMessages(System.Collections.Generic.IEnumerable{Discore.DiscordMessage},System.Boolean)">
            <summary>
            Deletes a list of messages in one API call.
            Much quicker than calling Delete() on each message instance.
            <para>Note: can only delete messages sent by the current bot.</para>
            </summary>
            <param name="filterTooOldMessages">Whether to ignore deleting messages that are older than 2 weeks
            (messages that are too old cause an API error).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordDMChannel.BulkDeleteMessages(System.Collections.Generic.IEnumerable{Discore.Snowflake},System.Boolean)">
            <summary>
            Deletes a list of messages in one API call.
            Much quicker than calling Delete() on each message instance.
            <para>Note: can only delete messages sent by the current bot.</para>
            </summary>
            <param name="filterTooOldMessages">Whether to ignore deleting messages that are older than 2 weeks
            (messages that are too old cause an API error).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordDMChannel.TriggerTypingIndicator">
            <summary>
            Causes the current bot's user to appear as typing in this channel.
            <para>Note: it is recommended that bots do not generally use this route.
            This should only be used if the bot is responding to a command that is expected
            to take a few seconds or longer.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordDMChannel.GetPinnedMessages">
            <summary>
            Gets a list of all pinned messages in this channel.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordDMChannel.GetMessage(Discore.Snowflake)">
            <summary>
            Gets a message in this channel.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordDMChannel.GetMessages(Discore.Snowflake,System.Nullable{System.Int32},Discore.Http.MessageGetStrategy)">
            <summary>
            Gets a list of messages in this channel.
            </summary>
            <param name="baseMessageId">The message ID the list will start at (is not included in the final list).</param>
            <param name="limit">Maximum number of messages to be returned.</param>
            <param name="getStrategy">The way messages will be located based on the <paramref name="baseMessageId"/>.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="T:Discore.DiscordEmbed">
            <summary>
            Embedded content in a message.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Title">
            <summary>
            Gets the title of this embed.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Type">
            <summary>
            Gets the type of this embed.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Description">
            <summary>
            Gets the description of this embed.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Url">
            <summary>
            Gets the url of this embed.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Timestamp">
            <summary>
            Gets the timestamp of this embed.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Color">
            <summary>
            Gets the color code of this embed.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Footer">
            <summary>
            Gets the footer information.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Image">
            <summary>
            Gets the image information.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Thumbnail">
            <summary>
            Gets the thumbnail of this embed.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Video">
            <summary>
            Gets the video information.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Provider">
            <summary>
            Gets the provider of this embed.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Author">
            <summary>
            Gets the author information.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbed.Fields">
            <summary>
            Gets a list of all fields in this embed.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedAuthor.Name">
            <summary>
            Gets the name of the author.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedAuthor.Url">
            <summary>
            Gets the url to the author.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedAuthor.IconUrl">
            <summary>
            Gets the url of an icon of the author (only http(s)).
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedAuthor.ProxyIconUrl">
            <summary>
            Gets a proxied url to the icon of the author.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedField.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedField.Value">
            <summary>
            Gets the value of the field.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedField.IsInline">
            <summary>
            Gets whether this field should display inline.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedFooter.Text">
            <summary>
            Gets the footer text.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedFooter.IconUrl">
            <summary>
            Gets the url of the footer icon (only http(s)).
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedFooter.ProxyIconUrl">
            <summary>
            Gets a proxied url of the footer icon.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedImage.Url">
            <summary>
            Gets the source url of the image (only http(s)).
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedImage.ProxyUrl">
            <summary>
            Gets a proxied url of the image.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedImage.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedImage.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="T:Discore.DiscordEmbedProvider">
            <summary>
            The web provider of a <see cref="T:Discore.DiscordEmbed"/>.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedProvider.Name">
            <summary>
            Gets the name of this provider.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedProvider.Url">
            <summary>
            Gets the url of this provider.
            </summary>
        </member>
        <member name="T:Discore.DiscordEmbedThumbnail">
            <summary>
            A thumbnail of a <see cref="T:Discore.DiscordEmbed"/>.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedThumbnail.Url">
            <summary>
            Gets the url of the thumbnail.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedThumbnail.ProxyUrl">
            <summary>
            Gets the proxy url of the thumbnail.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedThumbnail.Width">
            <summary>
            Gets the pixel-width of the thumbnail.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedThumbnail.Height">
            <summary>
            Gets the pixel-height of the thumbnail.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedVideo.Url">
            <summary>
            Gets the source url of the video.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedVideo.Width">
            <summary>
            Gets the width of the video.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmbedVideo.Height">
            <summary>
            Gets the height of the video.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmoji.Name">
            <summary>
            Gets the name of this emoji.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmoji.RoleIds">
            <summary>
            Gets the IDs of associated roles with this emoji.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmoji.UserId">
            <summary>
            Gets the ID of the user that created this emoji.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmoji.RequireColons">
            <summary>
            Gets whether or not colons are required around the emoji name to use it.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmoji.IsManaged">
            <summary>
            Gets whether or not this emoji is managed.
            </summary>
        </member>
        <member name="P:Discore.DiscordEmoji.IsAnimated">
            <summary>
            Gets whether or not this emoji is animated.
            </summary>
        </member>
        <member name="T:Discore.DiscordGame">
            <summary>
            Representation of the game a user is currently playing.
            </summary>
        </member>
        <member name="P:Discore.DiscordGame.Name">
            <summary>
            Gets the name of the game.
            </summary>
        </member>
        <member name="P:Discore.DiscordGame.Type">
            <summary>
            Gets the type of the game.
            </summary>
        </member>
        <member name="P:Discore.DiscordGame.Url">
            <summary>
            Gets the URL of the stream when the type is set to "Streaming" and the URL is valid.
            Otherwise, returns null.
            </summary>
        </member>
        <member name="F:Discore.DiscordGameType.Game">
            <summary>
            Example display: "Playing Overwatch".
            </summary>
        </member>
        <member name="F:Discore.DiscordGameType.Streaming">
            <summary>
            Example display: "Streaming Overwatch".
            </summary>
        </member>
        <member name="T:Discore.DiscordGuild">
            <summary>
            Represents a collection of users and channels. Also referred to as a "server".
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.Name">
            <summary>
            Gets the name of this guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.Icon">
            <summary>
            Gets the icon of this guild or null if the guild has no icon set.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.Splash">
            <summary>
            Gets the splash image of this guild or null if the guild has no splash.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.OwnerId">
            <summary>
            Gets the ID of the user who owns this guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.RegionId">
            <summary>
            Gets the ID of the voice region this guild is using.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.AfkChannelId">
            <summary>
            Gets the ID of the afk channel in this guild (if set).
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.AfkTimeout">
            <summary>
            Gets the afk timeout in seconds of this guild (if set).
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.IsEmbedEnabled">
            <summary>
            Gets whether this guild is embeddable as a widget.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.EmbedChannelId">
            <summary>
            Gets the ID of the embedded channel, if this guild is embeddable.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.VerificationLevel">
            <summary>
            Gets the level of verification required by this guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.DefaultMessageNotifications">
            <summary>
            Gets the default message notification level for users joining this guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.ExplicitContentFilter">
            <summary>
            Gets the level of explicit content filtering used by this server.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.Features">
            <summary>
            Gets a list of guild features.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.MfaLevel">
            <summary>
            Gets the level of multi-factor authentication for this guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.ApplicationId">
            <summary>
            Gets the application ID of the bot who created this guild.
            Returns null if this guild was not created by a bot.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.IsWidgetEnabled">
            <summary>
            Gets whether this guild has the widget enabled.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.WidgetChannelId">
            <summary>
            Gets the ID of the channel used by the guild's widget.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.SystemChannelId">
            <summary>
            Gets the ID of the text channel which system messages are sent to.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.Roles">
            <summary>
            Gets a dictionary of all roles in this guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuild.Emojis">
            <summary>
            Gets a dictionary of all custom emojis in this guild.
            </summary>
        </member>
        <member name="M:Discore.DiscordGuild.GetWebhooks">
            <summary>
            Gets a list of all webhooks in this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageWebhooks"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.Modify(Discore.Http.ModifyGuildOptions)">
            <summary>
            Changes the settings of this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.Delete">
            <summary>
            Deletes this guild permanently.
            <para>Note: current bot must be the owner.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.GetChannels">
            <summary>
            Gets a list of all channels in this guild.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.CreateChannel(Discore.Http.CreateGuildChannelOptions)">
            <summary>
            Creates a text or voice channel for this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.ModifyChannelPositions(System.Collections.Generic.IEnumerable{Discore.Http.PositionOptions})">
            <summary>
            Changes the positions of channels in the specified guild. The list of
            positions does not need to include every channel, it just needs the 
            channels that are being moved.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.GetMember(Discore.Snowflake)">
            <summary>
            Gets a member of this guild by their user ID.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.ListGuildMembers(System.Nullable{System.Int32},System.Nullable{Discore.Snowflake})">
            <summary>
            Gets a list of members in this guild.
            This method is paged, and cannot always return every member at once.
            </summary>
            <param name="limit">Max number of members to return (1-1000).</param>
            <param name="after">The highest user ID in the previous page.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.GetBans">
            <summary>
            Gets a list of all users banned from this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.BanMembers"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.CreateBan(Discore.Snowflake,System.Nullable{System.Int32})">
            <summary>
            Bans the specified user from this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.BanMembers"/>.</para>
            </summary>
            <param name="deleteMessageDays">Number of days to delete messages for (0-7) or null to delete none.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.RemoveBan(Discore.Snowflake)">
            <summary>
            Unbans the specified user from this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.BanMembers"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.GetRoles">
            <summary>
            Gets a list of all roles in this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.CreateRole(Discore.Http.CreateRoleOptions)">
            <summary>
            Creates a new role for this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <param name="options">A set of optional options to use when creating the role.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.ModifyRolePositions(System.Collections.Generic.IEnumerable{Discore.Http.PositionOptions})">
            <summary>
            Changes the sorting positions of the roles in this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.GetPruneCount(System.Int32)">
            <summary>
            Returns the number of members that would be kicked from a prune operation.
            <para>Requires <see cref="F:Discore.DiscordPermission.KickMembers"/>.</para>
            </summary>
            <param name="days">The number of days to count prune for (1 or more).</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.BeginPrune(System.Int32)">
            <summary>
            Begins a member prune operation, 
            kicking every member that has been offline for the specified number of days.
            <para>Requires <see cref="F:Discore.DiscordPermission.KickMembers"/>.</para>
            </summary>
            <param name="days">The number of days to prune (1 or more).</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.GetVoiceRegions">
            <summary>
            Gets a list of all voice regions available to this guild.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.GetInvites">
            <summary>
            Gets a list of invites to guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.GetIntegrations">
            <summary>
            Gets a list of integrations for this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.CreateIntegration(Discore.Snowflake,System.String)">
            <summary>
            Attaches an integration from the current bot to this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuild.GetEmbed">
            <summary>
            Returns the embed for this guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="P:Discore.DiscordGuildBan.Reason">
            <summary>
            Gets the reason for the ban or null if there was no reason.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildBan.User">
            <summary>
            Gets the user that was banned.
            </summary>
        </member>
        <member name="M:Discore.DiscordGuildCategoryChannel.Modify(Discore.Http.GuildCategoryChannelOptions)">
            <summary>
            Modifies this category channel's settings.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <param name="options">A set of options to modify the channel with</param>
            <returns>Returns the updated category channel.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="P:Discore.DiscordGuildChannel.Name">
            <summary>
            Gets the name of this channel.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildChannel.Position">
            <summary>
            Gets the UI ordering position of this channel.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildChannel.PermissionOverwrites">
            <summary>
            Gets a dictionary of all permission overwrites associated with this channel.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildChannel.GuildId">
            <summary>
            Gets the ID of the guild this channel is in.
            </summary>
        </member>
        <member name="M:Discore.DiscordGuildChannel.GetInvites">
            <summary>
            Gets a list of all invites for this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildChannel.CreateInvite(System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Creates an invite to this guild, through this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.CreateInstantInvite"/>.</para>
            </summary>
            <param name="maxAge">Duration of invite before expiry, or 0 or null for never.</param>
            <param name="maxUses">Max number of uses or 0 or null for unlimited.</param>
            <param name="temporary">Whether this invite only grants temporary membership.</param>
            <param name="unique">If true, don't try to reuse a similar invite (useful for creating many unique one time use invites).</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildChannel.EditPermissions(Discore.DiscordGuildMember,Discore.DiscordPermission,Discore.DiscordPermission)">
            <summary>
            Adds/edits a guild member permission overwrite for this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <param name="member">The member this overwrite will change permissions for.</param>
            <param name="allow">Specifically allowed permissions.</param>
            <param name="deny">Specifically denied permissions.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildChannel.EditPermissions(Discore.DiscordRole,Discore.DiscordPermission,Discore.DiscordPermission)">
            <summary>
            Adds/edits a role permission overwrite for this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <param name="role">The role this overwrite will change permissions for.</param>
            <param name="allow">Specifically allowed permissions.</param>
            <param name="deny">Specifically denied permissions.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildChannel.EditPermissions(Discore.Snowflake,Discore.DiscordOverwriteType,Discore.DiscordPermission,Discore.DiscordPermission)">
            <summary>
            Adds/edits a guild member or role permission overwrite for this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <param name="memberOrRoleId">The ID of the member or role this overwrite will change permissions for.</param>
            <param name="overwriteType">Whether the permissions should affect a member or role.</param>
            <param name="allow">Specifically allowed permissions.</param>
            <param name="deny">Specifically denied permissions.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildChannel.DeletePermission(Discore.DiscordGuildMember)">
            <summary>
            Deletes a permission overwrite for a guild member.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildChannel.DeletePermission(Discore.DiscordRole)">
            <summary>
            Deletes a permission overwrite for a role.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildChannel.DeletePermission(Discore.DiscordOverwrite)">
            <summary>
            Deletes a permission overwrite.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildChannel.DeletePermission(Discore.Snowflake)">
            <summary>
            Deletes a permission overwrite.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="P:Discore.DiscordGuildEmbed.Enabled">
            <summary>
            Gets whether this embed is enabled.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildEmbed.ChannelId">
            <summary>
            Gets the embed channel ID.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildEmbed.GuildId">
            <summary>
            Gets the ID of the guild this embed is for.
            </summary>
        </member>
        <member name="M:Discore.DiscordGuildEmbed.Modify(Discore.Http.ModifyGuildEmbedOptions)">
            <summary>
            Modifies the properties of this guild embed.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="P:Discore.DiscordGuildMember.GuildId">
            <summary>
            Gets the ID of the guild this member is in.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildMember.User">
            <summary>
            Gets the user data for this member.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildMember.Nickname">
            <summary>
            Gets the guild-wide nickname of the user.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildMember.RoleIds">
            <summary>
            Gets the IDs of all of the roles this member has.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildMember.JoinedAt">
            <summary>
            Gets the time this member joined the guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildMember.IsDeaf">
            <summary>
            Gets whether this member is deafened.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildMember.IsMute">
            <summary>
            Gets whether this member is muted.
            </summary>
        </member>
        <member name="M:Discore.DiscordGuildMember.Modify(Discore.Http.ModifyGuildMemberOptions)">
            <summary>
            Modifies the attributes of this member.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildMember.Kick">
            <summary>
            Removes this user from the guild they are a member of.
            <para>Requires <see cref="F:Discore.DiscordPermission.KickMembers"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildMember.Ban(System.Nullable{System.Int32})">
            <summary>
            Bans this user from the guild they are a member of.
            <para>Requires <see cref="F:Discore.DiscordPermission.BanMembers"/>.</para>
            </summary>
            <param name="deleteMessageDays">Number of days to delete messages for (0-7) or null to delete none.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildMember.AddRole(Discore.Snowflake)">
            <summary>
            Adds a role to this member.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildMember.RemoveRole(Discore.Snowflake)">
            <summary>
            Removes a role from this member.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="P:Discore.DiscordGuildTextChannel.Topic">
            <summary>
            Gets the topic of this channel.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildTextChannel.Nsfw">
            <summary>
            Gets whether this text channel is NSFW (not-safe-for-work).
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildTextChannel.ParentId">
            <summary>
            Gets the ID of the parent category channel or null if the channel is not in a category.
            </summary>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.GetWebhooks">
            <summary>
            Gets a list of all webhooks for this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageWebhooks"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.GetLastMessageId">
            <summary>
            Gets the ID of the last message sent in this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ReadMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException">Thrown if failed to retrieve channel messages.</exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.Modify(Discore.Http.GuildTextChannelOptions)">
            <summary>
            Modifies this text channel's settings.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <param name="options">A set of options to modify the channel with</param>
            <returns>Returns the updated text channel.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.CreateMessage(System.String)">
            <summary>
            Creates a message in this channel.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            </summary>
            <param name="content">The message text content.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.CreateMessage(Discore.Http.CreateMessageOptions)">
            <summary>
            Creates a message in this channel.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendTtsMessages"/> if TTS is enabled on the message.</para>
            </summary>
            <param name="details">The details of the message to create.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.CreateMessage(System.IO.Stream,System.String,Discore.Http.CreateMessageOptions)">
            <summary>
            Posts a message with a file attachment.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendTtsMessages"/> if TTS is enabled on the message.</para>
            </summary>
            <param name="fileData">A stream of the file contents.</param>
            <param name="fileName">The name of the file to use when uploading.</param>
            <param name="details">Optional extra details of the message to create.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.CreateMessage(System.ArraySegment{System.Byte},System.String,Discore.Http.CreateMessageOptions)">
            <summary>
            Posts a message with a file attachment.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendTtsMessages"/> if TTS is enabled on the message.</para>
            </summary>
            <param name="fileData">The file contents.</param>
            <param name="fileName">The name of the file to use when uploading.</param>
            <param name="details">Optional extra details of the message to create.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.BulkDeleteMessages(System.Collections.Generic.IEnumerable{Discore.DiscordMessage},System.Boolean)">
            <summary>
            Deletes a list of messages in one API call.
            Much quicker than calling Delete() on each message instance.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <param name="filterTooOldMessages">Whether to ignore deleting messages that are older than 2 weeks
            (messages that are too old cause an API error).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.BulkDeleteMessages(System.Collections.Generic.IEnumerable{Discore.Snowflake},System.Boolean)">
            <summary>
            Deletes a list of messages in one API call.
            Much quicker than calling Delete() on each message instance.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <param name="filterTooOldMessages">Whether to ignore deleting messages that are older than 2 weeks
            (messages that are too old cause an API error).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.TriggerTypingIndicator">
            <summary>
            Causes the current bot's user to appear as typing in this channel.
            <para>Note: it is recommended that bots do not generally use this route.
            This should only be used if the bot is responding to a command that is expected
            to take a few seconds or longer.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.GetPinnedMessages">
            <summary>
            Gets a list of all pinned messages in this channel.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.GetMessage(Discore.Snowflake)">
            <summary>
            Gets a message in this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ReadMessageHistory"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordGuildTextChannel.GetMessages(Discore.Snowflake,System.Nullable{System.Int32},Discore.Http.MessageGetStrategy)">
            <summary>
            Gets a list of messages in this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ReadMessages"/>.</para>
            </summary>
            <param name="baseMessageId">The message ID the list will start at (is not included in the final list).</param>
            <param name="limit">Maximum number of messages to be returned.</param>
            <param name="getStrategy">The way messages will be located based on the <paramref name="baseMessageId"/>.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="P:Discore.DiscordGuildVoiceChannel.Bitrate">
            <summary>
            Gets the audio bitrate used for this channel.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildVoiceChannel.UserLimit">
            <summary>
            Gets the maximum number of users that can be connected to this channel simultaneously.
            </summary>
        </member>
        <member name="P:Discore.DiscordGuildVoiceChannel.ParentId">
            <summary>
            Gets the ID of the parent category channel or null if the channel is not in a category.
            </summary>
        </member>
        <member name="M:Discore.DiscordGuildVoiceChannel.Modify(Discore.Http.GuildVoiceChannelOptions)">
            <summary>
            Modifies this voice channel's settings.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <param name="options">A set of options to modify the channel with</param>
            <returns>Returns the updated voice channel.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="T:Discore.DiscordIdEntity">
            <summary>
            The base class for all Discord entities that contain an ID.
            </summary>
        </member>
        <member name="P:Discore.DiscordIdEntity.Id">
            <summary>
            Gets the ID of this Discord entity.
            </summary>
        </member>
        <member name="M:Discore.DiscordIdEntity.Equals(Discore.DiscordIdEntity)">
            <summary>
            Determines whether the specified <see cref="T:Discore.DiscordIdEntity"/> is equal to the current entity.
            </summary>
            <param name="other">The other <see cref="T:Discore.DiscordIdEntity"/> to check.</param>
        </member>
        <member name="M:Discore.DiscordIdEntity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current Discord entity.
            </summary>
            <param name="obj">The other object to check.</param>
        </member>
        <member name="M:Discore.DiscordIdEntity.GetHashCode">
            <summary>
            Returns the hash of this Discord entity.
            </summary>
        </member>
        <member name="F:Discore.DiscordImageData.None">
            <summary>
            Gets a <see cref="T:Discore.DiscordImageData"/> instance representing a cleared image. 
            This can be used to remove avatars from guilds, users, etc.
            </summary>
        </member>
        <member name="P:Discore.DiscordImageData.Base64Data">
            <summary>
            Gets the image data as a base64 encoded string.
            </summary>
        </member>
        <member name="P:Discore.DiscordImageData.MediaType">
            <summary>
            Gets the media type of the image data (e.g. image/jpeg).
            </summary>
        </member>
        <member name="M:Discore.DiscordImageData.#ctor(System.String,System.String)">
            <summary>
            Creates image data from the base64 encoded string of an image.
            </summary>
            <param name="mediaType">A supported media type (e.g. image/jpeg, image/png, or image/gif).</param>
        </member>
        <member name="M:Discore.DiscordImageData.#ctor(System.Byte[],System.String)">
            <summary>
            Creates image data from raw image data.
            </summary>
            <param name="mediaType">A supported media type (e.g. image/jpeg, image/png, or image/gif).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the array is null.</exception>
        </member>
        <member name="M:Discore.DiscordImageData.#ctor(System.ArraySegment{System.Byte},System.String)">
            <summary>
            Creates image data from raw image data.
            </summary>
            <param name="mediaType">A supported media type (e.g. image/jpeg, image/png, or image/gif).</param>
        </member>
        <member name="M:Discore.DiscordImageData.ToDataUriScheme">
            <summary>
            Converts the image data to the following format:
            <para>data:MEDIA_TYPE;base64,BASE64_IMAGE_DATA</para>
            </summary>
        </member>
        <member name="M:Discore.DiscordImageData.FromDataUriScheme(System.String)">
            <exception cref="T:System.ArgumentException">Thrown if the given data URI is not a valid format.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Discore.DiscordIntegration">
            <summary>
            A guild integration.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.Name">
            <summary>
            Gets the name of this integration.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.Type">
            <summary>
            Gets the type of this integration.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.IsEnabled">
            <summary>
            Gets whether or not this integration is enabled.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.IsSyncing">
            <summary>
            Gets whether or not this integration is syncing.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.RoleId">
            <summary>
            Gets the ID of the associated role with this integration.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.ExpireBehavior">
            <summary>
            Gets the expire behavior of this integration.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.ExpireGracePeriod">
            <summary>
            Gets the expire grace period of this integration.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.User">
            <summary>
            Gets the associated <see cref="T:Discore.DiscordUser"/> with this integration.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.Account">
            <summary>
            Gets the account of this integration.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.SyncedAt">
            <summary>
            Gets the last time this integration was synced.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegration.GuildId">
            <summary>
            Gets the ID of the associated guild with this integration.
            </summary>
        </member>
        <member name="M:Discore.DiscordIntegration.Modify(Discore.Http.ModifyIntegrationOptions)">
            <summary>
            Changes the attributes of this integration, if this is a guild integration.
            <para>You can check if this is a guild integration, if <see cref="P:Discore.DiscordIntegration.GuildId"/> is not null.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this is not a guild integration.</exception>
        </member>
        <member name="M:Discore.DiscordIntegration.Delete">
            <summary>
            Deletes this integration, if this is a guild integration.
            <para>You can check if this is a guild integration, if <see cref="P:Discore.DiscordIntegration.GuildId"/> is not null.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this is not a guild integration.</exception>
        </member>
        <member name="M:Discore.DiscordIntegration.Sync">
            <summary>
            Synchronizes this integration, if this is a guild integration.
            <para>You can check if this is a guild integration, if <see cref="P:Discore.DiscordIntegration.GuildId"/> is not null.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this is not a guild integration.</exception>
        </member>
        <member name="T:Discore.DiscordIntegrationAccount">
            <summary>
            The account of an integration.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegrationAccount.Id">
            <summary>
            Gets the ID of this account.
            </summary>
        </member>
        <member name="P:Discore.DiscordIntegrationAccount.Name">
            <summary>
            Gets the name of this account.
            </summary>
        </member>
        <member name="M:Discore.DiscordIntegrationAccount.ToString">
            <summary>
            Returns the name of this integration account.
            </summary>
        </member>
        <member name="P:Discore.DiscordInvite.Code">
            <summary>
            Gets the unique invite code ID.
            </summary>
        </member>
        <member name="P:Discore.DiscordInvite.Guild">
            <summary>
            Gets the guild this invite is for.
            </summary>
        </member>
        <member name="P:Discore.DiscordInvite.Channel">
            <summary>
            Gets the channel this invite is for.
            </summary>
        </member>
        <member name="M:Discore.DiscordInvite.Delete">
            <summary>
            Deletes this invite.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="P:Discore.DiscordInviteChannel.ChannelId">
            <summary>
            Gets the ID of the channel this invite is for.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteChannel.Name">
            <summary>
            Gets the name of the channel.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteChannel.Type">
            <summary>
            Gets the type of channel.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteGuild.GuildId">
            <summary>
            Gets the ID of the guild this invite is for.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteGuild.Name">
            <summary>
            Gets the name of the guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteGuild.SplashHash">
            <summary>
            Gets the hash of the guild splash (or null if none exists).
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteMetadata.Inviter">
            <summary>
            Gets the user who created the invite.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteMetadata.Uses">
            <summary>
            Gets the number of times this invite has been used.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteMetadata.MaxUses">
            <summary>
            Gets the maximum number of times this invite can be used.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteMetadata.MaxAge">
            <summary>
            Gets the duration (in seconds) after which the invite expires.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteMetadata.IsTemporary">
            <summary>
            Gets whether this invite only grants temporary membership.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteMetadata.CreatedAt">
            <summary>
            Gets the date/time this invite was created.
            </summary>
        </member>
        <member name="P:Discore.DiscordInviteMetadata.IsRevoked">
            <summary>
            Gets whether this invite has been revoked.
            </summary>
        </member>
        <member name="T:Discore.DiscordMessage">
            <summary>
            Represents a message sent in a channel within Discord.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.ChannelId">
            <summary>
            Gets the ID of the channel this message is in.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.Author">
            <summary>
            Gets the author of this message.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.Content">
            <summary>
            Gets the contents of this message.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.Timestamp">
            <summary>
            Gets the time this message was first sent.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.EditedTimestamp">
            <summary>
            Gets the time of the last edit to this message.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.TextToSpeech">
            <summary>
            Gets whether or not this message was sent with the /tts command.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.MentionEveryone">
            <summary>
            Gets whether or not this message mentioned everyone via @everyone.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.Mentions">
            <summary>
            Gets a list of all user-specific mentions in this message.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.MentionedRoleIds">
            <summary>
            Gets a list of all the IDs of mentioned roles in this message.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.Attachments">
            <summary>
            Gets a list of all attachments in this message.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.Embeds">
            <summary>
            Gets a list of all embedded attachments in this message.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.Reactions">
            <summary>
            Gets a list of all reactions to this message.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.Nonce">
            <summary>
            Used for validating if a message was sent.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.IsPinned">
            <summary>
            Gets whether or not this message is pinned in the containing channel.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.WebhookId">
            <summary>
            If this message was generated by a webhook, gets the ID of that webhook.
            </summary>
        </member>
        <member name="P:Discore.DiscordMessage.Type">
            <summary>
            Gets the type of message.
            </summary>
        </member>
        <member name="M:Discore.DiscordMessage.Update(Discore.DiscordMessage,Discore.DiscordMessage)">
            <summary>
            Updates a message with a newer partial version of the same message. This is primarily used
            for obtaining the full message from a message update event, which only supplies the changes
            rather than the full message.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the IDs of each message do not match.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.CreateReaction(Discore.DiscordReactionEmoji)">
            <summary>
            Adds a reaction to this message.
            <para>Requires <see cref="F:Discore.DiscordPermission.ReadMessageHistory"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.AddReactions"/> if nobody else has reacted to the message prior.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.DeleteOwnReaction(Discore.DiscordReactionEmoji)">
            <summary>
            Removes a reaction from this message added from the current bot.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.DeleteUserReaction(Discore.DiscordUser,Discore.DiscordReactionEmoji)">
            <summary>
            Removes a reaction from this message.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <param name="user">The user who added the reacted.</param>
            <param name="reactionEmoji"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.DeleteUserReaction(Discore.Snowflake,Discore.DiscordReactionEmoji)">
            <summary>
            Removes a reaction from this message.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <param name="userId">The ID of the user who added the reacted.</param>
            <param name="reactionEmoji"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.GetReactions(Discore.DiscordReactionEmoji)">
            <summary>
            Gets all users who reacted with the specified emoji to this message.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.DeleteAllReactions">
            <summary>
            Deletes all reactions to this message.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.Pin">
            <summary>
            Pins this message to the channel it was sent in.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.Unpin">
            <summary>
            Unpins this message from the channel it was sent in.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.Edit(System.String)">
            <summary>
            Changes the contents of this message.
            <para>Note: only messages created by the current bot can be editted.</para>
            </summary>
            <returns>Returns the editted message.</returns>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.Edit(Discore.Http.EditMessageOptions)">
            <summary>
            Changes the contents of this message.
            <para>Note: only messages created by the current bot can be editted.</para>
            </summary>
            <returns>Returns the editted message.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordMessage.Delete">
            <summary>
            Deletes this message.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="T:Discore.DiscordOverwrite">
            <summary>
            A permission overwrite for a <see cref="T:Discore.DiscordRole"/> or <see cref="T:Discore.DiscordGuildMember"/>.
            </summary>
        </member>
        <member name="P:Discore.DiscordOverwrite.Type">
            <summary>
            The type of this overwrite.
            </summary>
        </member>
        <member name="P:Discore.DiscordOverwrite.Allow">
            <summary>
            The specifically allowed permissions specified by this overwrite.
            </summary>
        </member>
        <member name="P:Discore.DiscordOverwrite.Deny">
            <summary>
            The specifically denied permissions specified by this overwrite.
            </summary>
        </member>
        <member name="M:Discore.DiscordOverwrite.Edit(Discore.DiscordPermission,Discore.DiscordPermission)">
            <summary>
            Edits the permissions of this overwrite.
            If successful, changes will be immediately reflected for this instance.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordOverwrite.Delete">
            <summary>
            Deletes this overwrite.
            If successful, changes will be immediately reflected for the channel this overwrite was in.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="T:Discore.DiscordOverwriteType">
            <summary>
            The type of an overwrite..
            </summary>
        </member>
        <member name="F:Discore.DiscordOverwriteType.Role">
            <summary>
            The overwrite is for a role.
            </summary>
        </member>
        <member name="F:Discore.DiscordOverwriteType.Member">
            <summary>
            The overwrite is for a guild member.
            </summary>
        </member>
        <member name="T:Discore.DiscordPermission">
            <summary>
            Permission types for user abilities.
            https://github.com/hammerandchisel/discord-api-docs/blob/master/docs/topics/Permissions.md
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.None">
            <summary>
            No permissions.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.CreateInstantInvite">
            <summary>
            Allows creation of instant invites.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.KickMembers">
            <summary>
            Allows kicking members.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.BanMembers">
            <summary>
            Allows banning members.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.Administrator">
            <summary>
            Allows all permissions and bypasses channel permission overwrites.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ManageChannels">
            <summary>
            Allows management and editing of channels.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ManageGuild">
            <summary>
            Allows management and editing of the guild.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.AddReactions">
            <summary>
            Allows for the addition of reactions to messages.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ViewAuditLog">
            <summary>
            Allows for viewing of audit logs.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ReadMessages">
            <summary>
            Allows reading messages in a channel. The channel will not appear for users without this permission.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.SendMessages">
            <summary>
            Allows for sending messages in a channel.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.SendTtsMessages">
            <summary>
            Allows for sending of /tts messages.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ManageMessages">
            <summary>
            Allows for deletion of other users messages.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.EmbedLinks">
            <summary>
            Links sent by this user will be auto-embedded.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.AttachFiles">
            <summary>
            Allows for uploading images and files.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ReadMessageHistory">
            <summary>
            Allows for reading of message history.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.MentionEveryone">
            <summary>
            Allows for using the @everyone tag to notify all users in a channel, and the @here tag to notify 
            all online users in a channel.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.UseExternalEmojis">
            <summary>
            Allows the usage of custom emojis from other servers.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.Connect">
            <summary>
            Allows for joining of a voice channel.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.Speak">
            <summary>
            Allows for speaking in a voice channel.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.MuteMembers">
            <summary>
            Allows for muting members in a voice channel.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.DeafenMembers">
            <summary>
            Allows for deafening of members in a voice channel.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.MoveMembers">
            <summary>
            Allows for moving of members between voice channels.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.UseVad">
            <summary>
            Allows for using voice-activity-detection in a voice channel.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ChangeNickname">
            <summary>
            Allows for modification of own nickname.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ManageNicknames">
            <summary>
            Allows for modification of other users nicknames.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ManageRoles">
            <summary>
            Allows management and editing of roles.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ManageWebhooks">
            <summary>
            Allows management and editing of webhooks.
            </summary>
        </member>
        <member name="F:Discore.DiscordPermission.ManageEmojis">
            <summary>
            Allows management and editing of emojis.
            </summary>
        </member>
        <member name="T:Discore.DiscordPermissionException">
            <summary>
            An exception thrown because of a Discord permission issue.
            </summary>
        </member>
        <member name="P:Discore.DiscordPermissionException.Permission">
            <summary>
            The required permissions that caused the exception.
            </summary>
        </member>
        <member name="P:Discore.DiscordPermissionException.Member">
            <summary>
            The member that didn't have the right permissions.
            </summary>
        </member>
        <member name="P:Discore.DiscordPermissionException.Guild">
            <summary>
            The guild the member is in.
            </summary>
        </member>
        <member name="P:Discore.DiscordPermissionException.Channel">
            <summary>
            The channel (if applicable) the permissions were checked against.
            </summary>
        </member>
        <member name="M:Discore.DiscordPermissionException.#ctor(Discore.DiscordGuildMember,Discore.DiscordGuild,Discore.DiscordPermission)">
            <summary>
            Creates a new <see cref="T:Discore.DiscordPermissionException"/> instance.
            </summary>
            <param name="member">The member that didn't have the right permissions.</param>
            <param name="guild">The guild the member is in.</param>
            <param name="permission">The permissions that caused the exception.</param>
        </member>
        <member name="M:Discore.DiscordPermissionException.#ctor(Discore.DiscordGuildMember,Discore.DiscordGuild,Discore.DiscordGuildChannel,Discore.DiscordPermission)">
            <summary>
            Creates a new <see cref="T:Discore.DiscordPermissionException"/> instance.
            </summary>
            <param name="member">The member that didn't have the right permissions.</param>
            <param name="guild">The guild the member is in.</param>
            <param name="channel">The channel the permissions were checked against.</param>
            <param name="permission">The permissions that caused the exception.</param>
        </member>
        <member name="M:Discore.DiscordPermissionHelper.HasPermission(Discore.DiscordPermission,Discore.DiscordGuildMember,Discore.DiscordGuild)">
            <summary>
            Returns whether the specified member has the given set of permissions.
            </summary>
            <param name="permissions">The set of permissions to check if the member has.</param>
            <param name="member">The member to check the permissions of.</param>
            <param name="guild">The guild this member is in.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="member"/> is not in the specified <paramref name="guild"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="member"/> or <paramref name="guild"/> is null.
            </exception>
        </member>
        <member name="M:Discore.DiscordPermissionHelper.HasPermission(Discore.DiscordPermission,Discore.DiscordGuildMember,Discore.DiscordGuild,Discore.DiscordGuildChannel)">
            <summary>
            Returns whether the specified member has the given set of permissions
            in the context of the specified guild channel.
            </summary>
            <param name="permissions">The set of permissions to check if the member has.</param>
            <param name="member">The member to check the permissions of.</param>
            <param name="guild">The guild this member is in.</param>
            <param name="channel">
            The guild channel to check the permissions against (this will take overwrites into account).
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="member"/> or <paramref name="channel"/> is not in the 
            specified <paramref name="guild"/>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="member"/>, <paramref name="guild"/>, or <paramref name="channel"/>
            is null.
            </exception>
        </member>
        <member name="M:Discore.DiscordPermissionHelper.AssertPermission(Discore.DiscordPermission,Discore.DiscordGuildMember,Discore.DiscordGuild)">
            <summary>
            Checks whether the specified member has the given set of permissions.
            If they don't, a <see cref="T:Discore.DiscordPermissionException"/> is thrown with details.
            </summary>
            <param name="permissions">The set of permissions to check if the member has.</param>
            <param name="member">The member to check the permissions of.</param>
            <param name="guild">The guild this member is in.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="member"/> is not in the specified <paramref name="guild"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="member"/> or <paramref name="guild"/> is null.
            </exception>
        </member>
        <member name="M:Discore.DiscordPermissionHelper.AssertPermission(Discore.DiscordPermission,Discore.DiscordGuildMember,Discore.DiscordGuild,Discore.DiscordGuildChannel)">
            <summary>
            Checks whether the specified member has the given set of permissions 
            in the context of the specified guild channel.
            If they don't, a <see cref="T:Discore.DiscordPermissionException"/> is thrown with details.
            </summary>
            <param name="permissions">The set of permissions to check if the member has.</param>
            <param name="member">The member to check the permissions of.</param>
            <param name="guild">The guild this member is in.</param>
            <param name="channel">
            The guild channel to check the permissions against (this will take overwrites into account).
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="member"/> or <paramref name="channel"/> is not in the 
            specified <paramref name="guild"/>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="member"/>, <paramref name="guild"/>, or <paramref name="channel"/>
            is null.
            </exception>
        </member>
        <member name="P:Discore.DiscordReaction.Count">
            <summary>
            Gets the number of times this emoji has been used to react.
            </summary>
        </member>
        <member name="P:Discore.DiscordReaction.Me">
            <summary>
            Gets whether the current bot reacted using this emoji.
            </summary>
        </member>
        <member name="P:Discore.DiscordReaction.Emoji">
            <summary>
            Gets the emoji information of this reaction.
            </summary>
        </member>
        <member name="P:Discore.DiscordReactionEmoji.Id">
            <summary>
            Gets the ID of the emoji (if custom emoji).
            </summary>
        </member>
        <member name="P:Discore.DiscordReactionEmoji.Name">
            <summary>
            Gets the name of the emoji.
            </summary>
        </member>
        <member name="T:Discore.DiscordRole">
            <summary>
            Roles represent a set of permissions attached to a group of users.
            </summary>
        </member>
        <member name="P:Discore.DiscordRole.GuildId">
            <summary>
            Gets the ID of the guild this role is for.
            </summary>
        </member>
        <member name="P:Discore.DiscordRole.Name">
            <summary>
            Gets the name of this role.
            </summary>
        </member>
        <member name="P:Discore.DiscordRole.Color">
            <summary>
            Gets the displayed color of this role.
            </summary>
        </member>
        <member name="P:Discore.DiscordRole.IsHoisted">
            <summary>
            Gets whether this role is pinned in the user list of a guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordRole.Position">
            <summary>
            Gets the ordering position of this role.
            </summary>
        </member>
        <member name="P:Discore.DiscordRole.Permissions">
            <summary>
            Gets the permissions specified by this role.
            </summary>
        </member>
        <member name="P:Discore.DiscordRole.IsManaged">
            <summary>
            Gets whether this role is managed.
            </summary>
        </member>
        <member name="P:Discore.DiscordRole.IsMentionable">
            <summary>
            Gets whether this role is mentionable.
            </summary>
        </member>
        <member name="M:Discore.DiscordRole.Modify(Discore.Http.ModifyRoleOptions)">
            <summary>
            Modifies the settings of this role.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordRole.Delete">
            <summary>
            Deletes this role.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="P:Discore.DiscordUser.Username">
            <summary>
            Gets the name of this user.
            </summary>
        </member>
        <member name="P:Discore.DiscordUser.Discriminator">
            <summary>
            Gets the user's 4-digit discord-tag.
            </summary>
        </member>
        <member name="P:Discore.DiscordUser.Avatar">
            <summary>
            Gets the user's avatar or null if the user does not have an avatar.
            </summary>
        </member>
        <member name="P:Discore.DiscordUser.IsBot">
            <summary>
            Gets whether this account belongs to an OAuth application.
            </summary>
        </member>
        <member name="P:Discore.DiscordUser.HasTwoFactorAuth">
            <summary>
            Gets whether this account has two-factor authentication enabled.
            </summary>
        </member>
        <member name="P:Discore.DiscordUser.IsVerified">
            <summary>
            Gets whether the email on this account is verified.
            </summary>
        </member>
        <member name="P:Discore.DiscordUser.Email">
            <summary>
            Gets the email (if available) of this account.
            </summary>
        </member>
        <member name="P:Discore.DiscordUser.IsWebhookUser">
            <summary>
            Gets whether this is a webhook user.
            </summary>
        </member>
        <member name="T:Discore.DiscordUserGuild">
            <summary>
            A brief version of a guild object.
            </summary>
        </member>
        <member name="P:Discore.DiscordUserGuild.Name">
            <summary>
            Gets the name of this guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordUserGuild.Icon">
            <summary>
            Gets the icon of this guild or null if the guild has no icon set.
            </summary>
        </member>
        <member name="P:Discore.DiscordUserGuild.IsOwner">
            <summary>
            Gets whether the user is the owner of this guild.
            </summary>
        </member>
        <member name="P:Discore.DiscordUserGuild.Permissions">
            <summary>
            Gets the user's enabled/disabled permissions.
            </summary>
        </member>
        <member name="P:Discore.DiscordUserPresence.UserId">
            <summary>
            Gets the ID of the user this presence is for.
            </summary>
        </member>
        <member name="P:Discore.DiscordUserPresence.Game">
            <summary>
            Gets the game this user is currently playing.
            </summary>
        </member>
        <member name="P:Discore.DiscordUserPresence.Status">
            <summary>
            Gets the current status of this user.
            </summary>
        </member>
        <member name="T:Discore.DiscordUserStatus">
            <summary>
            The status of a user.
            </summary>
        </member>
        <member name="F:Discore.DiscordUserStatus.Invisible">
            <summary>
            Note: This only applies to setting the status of the current bot.
            Invisible users will always have the value of <see cref="F:Discore.DiscordUserStatus.Offline"/>.
            </summary>
        </member>
        <member name="P:Discore.DiscordWebhook.GuildId">
            <summary> 
            Gets the ID of the guild this webhook belongs to.
            </summary> 
        </member>
        <member name="P:Discore.DiscordWebhook.ChannelId">
            <summary> 
            Gets the ID of the channel this webhook is active for.
            </summary> 
        </member>
        <member name="P:Discore.DiscordWebhook.User">
            <summary> 
            Gets the user that created this webhook.
            </summary> 
        </member>
        <member name="P:Discore.DiscordWebhook.Name">
            <summary> 
            Gets the public name of this webhook.
            </summary> 
        </member>
        <member name="P:Discore.DiscordWebhook.Avatar">
            <summary> 
            Gets the avatar of this webhook (or null if the webhook user has no avatar set).
            </summary> 
        </member>
        <member name="P:Discore.DiscordWebhook.Token">
            <summary> 
            Gets the token of this webhook. 
            <para>This is only populated if the current bot created the webhook, otherwise it's empty/null.</para> 
            <para>It's used for executing, updating, and deleting this webhook without the need of authorization.</para> 
            </summary> 
        </member>
        <member name="P:Discore.DiscordWebhook.HasToken">
            <summary>
            Gets whether this webhook instance contains the webhook token.
            </summary>
        </member>
        <member name="M:Discore.DiscordWebhook.Modify(System.String,Discore.DiscordImageData,System.Nullable{Discore.Snowflake})">
            <summary>
            Modifies the settings of this webhook.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageWebhooks"/>.</para>
            </summary>
            <param name="channelId">The ID of the text channel to move this webhook to (or null to not move).</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordWebhook.ModifyWithToken(System.String,System.String,Discore.DiscordImageData)">
            <summary>
            Modifies the settings of this webhook.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if token is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordWebhook.Delete">
            <summary>
            Deletes this webhook permanently.
            <para>Note: current bot must be the owner.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageWebhooks"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordWebhook.DeleteWithToken(System.String)">
            <summary>
            Deletes this webhook permanently.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if token is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordWebhook.Execute(System.String,Discore.Http.ExecuteWebhookOptions,System.Boolean)">
            <summary>
            Executes this webhook.
            <para>Note: Returns null unless <paramref name="waitAndReturnMessage"/> is set to true.</para>
            </summary>
            <param name="token">The webhook's token.</param>
            <param name="waitAndReturnMessage">Whether to wait for the message to be created 
            and have it returned from this method.</param>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the token or <paramref name="options"/> is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordWebhook.Execute(System.String,System.IO.Stream,System.String,Discore.Http.ExecuteWebhookOptions,System.Boolean)">
            <summary>
            Executes this webhook with a file attachment.
            <para>Note: Returns null unless <paramref name="waitAndReturnMessage"/> is set to true.</para>
            </summary>
            <param name="token">The webhook's token.</param>
            <param name="waitAndReturnMessage">Whether to wait for the message to be created 
            and have it returned from this method.</param>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the token is null, 
            or <paramref name="fileData"/> is null,
            or the file name is null, empty, or only contains whitespace characters.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscordWebhook.Execute(System.String,System.ArraySegment{System.Byte},System.String,Discore.Http.ExecuteWebhookOptions,System.Boolean)">
            <summary>
            Executes this webhook with a file attachment.
            <para>Note: Returns null unless <paramref name="waitAndReturnMessage"/> is set to true.</para>
            </summary>
            <param name="token">The webhook's token.</param>
            <param name="waitAndReturnMessage">Whether to wait for the message to be created 
            and have it returned from this method.</param>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the token is null 
            or the file name is null, empty, or only contains whitespace characters.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.DiscoreLocalStorage.GetInstanceAsync">
            <summary>
            Gets the existing or creates a new instance of the local storage API.
            </summary>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:Discore.DiscoreLocalStorage.OpenAsync">
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:Discore.DiscoreLocalStorage.CreateNewFileAsync">
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:Discore.DiscoreLocalStorage.SaveAsync">
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:Discore.DiscoreLocalStorage.GetGatewayUrlAsync(Discore.Http.DiscordHttpClient,System.Boolean)">
            <param name="useCached">
            Whether to use the cached gateway URL (if available) or to pull down a new one via HTTP.
            </param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:Discore.DiscoreLocalStorage.InvalidateGatewayUrlAsync">
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="P:Discore.DiscoreLogEventArgs.Message">
            <summary>
            Gets the message that was logged.
            </summary>
        </member>
        <member name="T:Discore.DiscoreLogMessage">
            <summary>
            Represents a single logged line.
            </summary>
        </member>
        <member name="P:Discore.DiscoreLogMessage.Content">
            <summary>
            Gets the contents of this message.
            </summary>
        </member>
        <member name="P:Discore.DiscoreLogMessage.Type">
            <summary>
            Gets the severity of this message.
            </summary>
        </member>
        <member name="P:Discore.DiscoreLogMessage.Timestamp">
            <summary>
            Gets the date/time this message was logged.
            </summary>
        </member>
        <member name="T:Discore.DiscoreLogLevel">
            <summary>
            The severity level of a log message.
            </summary>
        </member>
        <member name="T:Discore.DiscoreLogger">
            <summary>
            A logger for Discore related systems.
            </summary>
        </member>
        <member name="E:Discore.DiscoreLogger.OnLog">
            <summary>
            Fired when a message is logged from Discore.
            </summary>
        </member>
        <member name="P:Discore.DiscoreLogger.MinimumLevel">
            <summary>
            Gets or sets the minimum log level to be sent through the <see cref="E:Discore.DiscoreLogger.OnLog"/> event.
            <para>
            For example: A log level of <see cref="F:Discore.DiscoreLogLevel.Info"/> will log 
            everything except <see cref="F:Discore.DiscoreLogLevel.Debug"/>.
            </para>
            <para>
            This defaults to <see cref="F:Discore.DiscoreLogLevel.Info"/>.
            </para>
            </summary>
        </member>
        <member name="P:Discore.DiscoreLogger.Prefix">
            <summary>
            Gets or sets the prefix for this <see cref="T:Discore.DiscoreLogger"/>.
            </summary>
        </member>
        <member name="M:Discore.DiscoreLogger.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Discore.DiscoreLogger"/> instance.
            </summary>
            <param name="prefix">The prefix of this logger.</param>
        </member>
        <member name="M:Discore.DiscoreLogger.Log(System.String,Discore.DiscoreLogLevel)">
            <summary>
            Logs a line to this logger.
            </summary>
            <param name="msg">The contents of this log.</param>
            <param name="type">The type of log.</param>
        </member>
        <member name="M:Discore.DiscoreLogger.LogVerbose(System.String)">
            <summary>
            Logs a verbose message.
            </summary>
            <param name="msg">The contents of this log.</param>
        </member>
        <member name="M:Discore.DiscoreLogger.LogInfo(System.String)">
            <summary>
            Logs an info message.
            </summary>
            <param name="msg">The contents of this log.</param>
        </member>
        <member name="M:Discore.DiscoreLogger.LogWarning(System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="msg">The contents of this log.</param>
        </member>
        <member name="M:Discore.DiscoreLogger.LogError(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="msg">The contents of this log.</param>
        </member>
        <member name="M:Discore.DiscoreLogger.LogError(System.Exception)">
            <summary>
            Logs an error message.
            </summary>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="T:Discore.GuildMfaLevel">
            <summary>
            Multi-factor authentication levels for a Discord guild.
            </summary>
        </member>
        <member name="T:Discore.GuildNotificationOption">
            <summary>
            Notification options for Discord guilds.
            </summary>
        </member>
        <member name="T:Discore.GuildVerificationLevel">
            <summary>
            Member verification levels for Discord guilds.
            </summary>
        </member>
        <member name="F:Discore.GuildVerificationLevel.None">
            <summary>
            Unrestricted.
            </summary>
        </member>
        <member name="F:Discore.GuildVerificationLevel.Low">
            <summary>
            Must have a verified email on their Discord account.
            </summary>
        </member>
        <member name="F:Discore.GuildVerificationLevel.Medium">
            <summary>
            Must have a verified email on their Discord account 
            and be registered on Discord for longer than 5 minutes.
            </summary>
        </member>
        <member name="F:Discore.GuildVerificationLevel.High">
            <summary>
            Must have a verified email on their Discord account,
            be registered on Discord for longer than 5 minutes,
            and be a member of this server for longer than 10 minutes.
            <para>AKA: (╯°□°）╯︵ ┻━┻</para>
            </summary>
        </member>
        <member name="F:Discore.GuildVerificationLevel.VeryHigh">
            <summary>
            Must have a verified phone on their Discord account.
            <para>AKA: ┻━┻ ﾐヽ(ಠ益ಠ)ノ彡┻━┻</para>
            </summary>
        </member>
        <member name="T:Discore.Http.CreateGuildChannelOptions">
            <summary>
            A set of parameters for creating a new text or voice guild channel.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildChannelOptions.Name">
            <summary>
            Gets or sets the channel name.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildChannelOptions.Type">
            <summary>
            Gets the type of guild channel.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildChannelOptions.Bitrate">
            <summary>
            Gets or sets the voice bitrate (if a voice channel).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this builder is not for a voice channel.</exception>
        </member>
        <member name="P:Discore.Http.CreateGuildChannelOptions.UserLimit">
            <summary>
            Gets or sets the user limit (if a voice channel).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this builder is not for a voice channel.</exception>
        </member>
        <member name="P:Discore.Http.CreateGuildChannelOptions.Topic">
            <summary>
            Gets or sets the topic (if a text channel).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this builder is not for a text channel.</exception>
        </member>
        <member name="P:Discore.Http.CreateGuildChannelOptions.Nsfw">
            <summary>
            Gets or sets whether this channel is NSFW (not-safe-for-work) (if a text channel).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this builder is not for a text channel.</exception>
        </member>
        <member name="P:Discore.Http.CreateGuildChannelOptions.ParentId">
            <summary>
            Gets or sets the parent category channel ID (if a text or voice channel).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this builder is not for a text or voice channel.</exception>
        </member>
        <member name="P:Discore.Http.CreateGuildChannelOptions.PermissionOverwrites">
            <summary>
            Gets or sets a list of permission overwrites.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildChannelOptions.#ctor(Discore.DiscordChannelType)">
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/> is not a guild channel type.</exception>
        </member>
        <member name="M:Discore.Http.CreateGuildChannelOptions.SetName(System.String)">
            <summary>
            Sets the channel name.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildChannelOptions.SetBitrate(System.Int32)">
            <summary>
            Sets the voice bitrate (if a voice channel).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this builder is not for a voice channel.</exception>
        </member>
        <member name="M:Discore.Http.CreateGuildChannelOptions.SetUserLimit(System.Int32)">
            <summary>
            Sets the user limit (if a voice channel).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this builder is not for a voice channel.</exception>
        </member>
        <member name="M:Discore.Http.CreateGuildChannelOptions.SetTopic(System.String)">
            <summary>
            Sets the topic (if a text channel).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this builder is not for a text channel.</exception>
        </member>
        <member name="M:Discore.Http.CreateGuildChannelOptions.SetNsfw(System.Boolean)">
            <summary>
            Sets whether this channel is NSFW (not-safe-for-work) (if a text channel).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this builder is not for a text channel.</exception>
        </member>
        <member name="M:Discore.Http.CreateGuildChannelOptions.AddPermissionOverwrite(Discore.Http.OverwriteOptions)">
            <summary>
            Adds a permission overwrite to the channel.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildEmojiOptions.Name">
            <summary>
            Gets or sets the name of the emoji.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildEmojiOptions.Image">
            <summary>
            Gets or sets the emoji's image.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildEmojiOptions.SetName(System.String)">
            <summary>
            Sets the name of the emoji.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildEmojiOptions.SetImage(Discore.DiscordImageData)">
            <summary>
            Sets the emoji's image.
            </summary>
        </member>
        <member name="T:Discore.Http.CreateGuildOptions">
            <summary>
            A set of options to use when creating a new guild.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildOptions.Name">
            <summary>
            Gets or sets the name of the guild.
            <para>Note: cannot be null.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildOptions.VoiceRegion">
            <summary>
            Gets or sets the ID of the voice region the guild should use (or null to use default).
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildOptions.Icon">
            <summary>
            Gets or sets the icon of the guild (or null to use default).
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildOptions.VerificationLevel">
            <summary>
            Gets or sets the verification level of the guild (or null to use default).
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildOptions.DefaultMessageNotificationsLevel">
            <summary>
            Gets or sets the default notification level for new members joining the guild (or null to use default).
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildOptions.Roles">
            <summary>
            Gets or sets the initial roles in the guild (or null to not include any additional roles).
            <para>Note: The first role in this list will end up as the @everyone role.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildOptions.Channels">
            <summary>
            Gets or sets the initial text and voice channels in the guild (or null to use defaults).
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildOptions.SetName(System.String)">
            <summary>
            Sets the name of the guild.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildOptions.SetVoiceRegion(System.String)">
            <summary>
            Sets the ID of the voice region the guild should use.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildOptions.SetIcon(Discore.DiscordImageData)">
            <summary>
            Sets the icon of the guild.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildOptions.SetVerificationLevel(System.Int32)">
            <summary>
            Sets the verification level of the guild.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildOptions.SetDefaultMessageNotificationsLevel(System.Int32)">
            <summary>
            Sets the default notification level for new members joining the guild.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildOptions.AddRole(Discore.Http.CreateGuildRoleOptions)">
            <summary>
            Adds a role to be created with the guild.
            <para>Note: The first role added will end up as the @everyone role.</para>
            </summary>
            <param name="role">Note: If this is the first role, it will end up as the @everyone role.</param>
        </member>
        <member name="M:Discore.Http.CreateGuildOptions.AddChannel(Discore.Http.CreateGuildChannelOptions)">
            <summary>
            Adds a text or voice channel to be created with the guild.
            </summary>
        </member>
        <member name="T:Discore.Http.CreateGuildRoleOptions">
            <summary>
            A set of parameters for creating roles when creating a new guild.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateGuildRoleOptions.TemporaryId">
            <summary>
            Gets or sets a temporary ID for the role. This allows channels also created with
            the guild to overwrite this role's permissions. 
            <para>
            This role's ID will be overwritten upon creation of the guild.
            </para>
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildRoleOptions.#ctor(Discore.Snowflake)">
            <param name="temporaryId">A temporary ID for the role, which will be overwritten upon guild creation.</param>
        </member>
        <member name="M:Discore.Http.CreateGuildRoleOptions.SetName(System.String)">
            <summary>
            Sets the name of the role to create.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildRoleOptions.SetPermissions(Discore.DiscordPermission)">
            <summary>
            Sets the permissions of the role to create.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildRoleOptions.SetColor(Discore.DiscordColor)">
            <summary>
            Sets the color of the role to create.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildRoleOptions.SetHoisted(System.Boolean)">
            <summary>
            Sets whether the created role should be displayed in the sidebar.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateGuildRoleOptions.SetMentionable(System.Boolean)">
            <summary>
            Sets whether the created role should be mentionable.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateMessageOptions.Content">
            <summary>
            Gets or sets the contents of the message.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateMessageOptions.TextToSpeech">
            <summary>
            Gets or sets whether the message should use text-to-speech.
            Default: false
            </summary>
        </member>
        <member name="P:Discore.Http.CreateMessageOptions.Nonce">
            <summary>
            Gets or sets a nonce used for validating whether a message was created.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateMessageOptions.Embed">
            <summary>
            Gets or sets an embed to be sent with the message.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateMessageOptions.SetContent(System.String)">
            <summary>
            Sets the contents of the message.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateMessageOptions.SetTextToSpeech(System.Boolean)">
            <summary>
            Sets whether the message should use text-to-speech.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateMessageOptions.SetNonce(System.Nullable{Discore.Snowflake})">
            <summary>
            Sets a nonce used for validating whether a message was created.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateMessageOptions.SetEmbed(Discore.Http.EmbedOptions)">
            <summary>
            Sets an embed to be sent with the message.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateRoleOptions.Name">
            <summary>
            Gets or sets the name of the role to create.
            </summary>
        </member>
        <member name="P:Discore.Http.CreateRoleOptions.Permissions">
            <summary>
            Gets or sets the permissions of the role to create (or null to use default).
            </summary>
        </member>
        <member name="P:Discore.Http.CreateRoleOptions.Color">
            <summary>
            Gets or sets the color of the role to create (or null to use default).
            </summary>
        </member>
        <member name="P:Discore.Http.CreateRoleOptions.IsHoisted">
            <summary>
            Gets or sets whether the created role should be displayed in the sidebar (or null to use default).
            </summary>
        </member>
        <member name="P:Discore.Http.CreateRoleOptions.IsMentionable">
            <summary>
            Gets or sets whether the created role should be mentionable (or null to use default).
            </summary>
        </member>
        <member name="M:Discore.Http.CreateRoleOptions.SetName(System.String)">
            <summary>
            Sets the name of the role to create.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateRoleOptions.SetPermissions(Discore.DiscordPermission)">
            <summary>
            Sets the permissions of the role to create.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateRoleOptions.SetColor(Discore.DiscordColor)">
            <summary>
            Sets the color of the role to create.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateRoleOptions.SetHoisted(System.Boolean)">
            <summary>
            Sets whether the created role should be displayed in the sidebar.
            </summary>
        </member>
        <member name="M:Discore.Http.CreateRoleOptions.SetMentionable(System.Boolean)">
            <summary>
            Sets whether the created role should be mentionable.
            </summary>
        </member>
        <member name="T:Discore.Http.DiscordHttpApiException">
            <summary>
            An exception representing an error sent by the Discord HTTP API.
            </summary>
        </member>
        <member name="P:Discore.Http.DiscordHttpApiException.ErrorCode">
            <summary>
            Gets the custom Discord HTTP error code.
            </summary>
        </member>
        <member name="P:Discore.Http.DiscordHttpApiException.HttpStatusCode">
            <summary>
            Gets the HTTP status code associated with the error.
            </summary>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetChannel(Discore.Snowflake)">
            <summary>
            Gets a DM or guild channel by ID.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetChannel``1(Discore.Snowflake)">
            <summary>
            Gets a DM or guild channel by ID.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyTextChannel(Discore.Snowflake,Discore.Http.GuildTextChannelOptions)">
            <summary>
            Updates the settings of a guild text channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <param name="textChannelId">The ID of the guild text channel to modify.</param>
            <param name="options">A set of options to modify the channel with.</param>
            <returns>Returns the updated guild text channel.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyVoiceChannel(Discore.Snowflake,Discore.Http.GuildVoiceChannelOptions)">
            <summary>
            Updates the settings of a guild voice channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <param name="voiceChannelId">The ID of the guild voice channel to modify.</param>
            <param name="options">A set of options to modify the channel with.</param>
            <returns>Returns the updated guild voice channel.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyCategoryChannel(Discore.Snowflake,Discore.Http.GuildCategoryChannelOptions)">
            <summary>
            Updates the settings of a guild category channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <param name="categoryChannelId">The ID of the guild category channel to modify.</param>
            <param name="options">A set of options to modify the channel with.</param>
            <returns>Returns the updated guild category channel.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteChannel(Discore.Snowflake)">
            <summary>
            Deletes a guild channel, or closes a DM.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/> if deleting a guild channel.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteChannel``1(Discore.Snowflake)">
            <summary>
            Deletes a guild channel, or closes a DM.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/> if deleting a guild channel.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.EditChannelPermissions(Discore.Snowflake,Discore.Snowflake,Discore.DiscordPermission,Discore.DiscordPermission,Discore.DiscordOverwriteType)">
            <summary>
            Edits a guild channel permission overwrite for a user or role.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteChannelPermission(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Deletes a guild channel permission overwrite for a user or role.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.TriggerTypingIndicator(Discore.Snowflake)">
            <summary>
            Causes the current bot to appear as typing in this channel.
            <para>Note: it is recommended that bots do not generally use this route.
            This should only be used if the bot is responding to a command that is expected
            to take a few seconds or longer.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildChannels(Discore.Snowflake)">
            <summary>
            Gets a list of all channels in a guild.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateGuildChannel(Discore.Snowflake,Discore.Http.CreateGuildChannelOptions)">
            <summary>
            Creates a new text channel, voice channel, or channel category for a guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyGuildChannelPositions(Discore.Snowflake,System.Collections.Generic.IEnumerable{Discore.Http.PositionOptions})">
            <summary>
            Changes the positions of channels in the specified guild. The list of
            positions does not need to include every channel, it just needs the 
            channels that are being moved.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="P:Discore.Http.DiscordHttpClient.UseSingleHttpClient">
            <summary> 
            Gets or sets whether a single HTTP client should be used for all API requests per 
            <see cref="T:Discore.Http.DiscordHttpClient"/> instance. 
            <para>In rare cases using a single client causes requests to hang until they timeout 
            (believed to be a .NET Core bug).</para>
            <para>This is true by default.</para> 
            <para>Note: This only applies to newly created <see cref="T:Discore.Http.DiscordHttpClient"/> instances.</para> 
            </summary> 
        </member>
        <member name="P:Discore.Http.DiscordHttpClient.RetryWhenRateLimited">
            <summary>
            Gets or sets whether to resend requests that get rate-limited.
            </summary>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ListGuildEmojis(Discore.Snowflake)">
            <summary>
            Gets a list of all emojis in a guild.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildEmoji(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Gets a guild's emoji.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="emojiId">The ID of the emoji in the guild.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateGuildEmoji(Discore.Snowflake,Discore.Http.CreateGuildEmojiOptions)">
            <summary>
            Creates and returns a new guild emoji.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageEmojis"/>.</para>
            </summary>
            <param name="guildId">The ID of the guild to give the new emoji to.</param>
            <param name="options">Options describing the properties of the new emoji.</param>
            <returns>Returns the newly created emoji.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyGuildEmoji(Discore.Snowflake,Discore.Snowflake,Discore.Http.ModifyGuildEmojiOptions)">
            <summary>
            Updates an existing guild emoji.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageEmojis"/>.</para>
            </summary>
            <param name="guildId">The ID of the guild the emoji is in.</param>
            <param name="emojiId">The ID of the emoji.</param>
            <param name="options">Options describing the properties of the new emoji.</param>
            <returns>Returns the updated emoji.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteGuildEmoji(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Deletes a guild's emoji.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageEmojis"/>.</para>
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="emojiId">The ID of the emoji in the guild.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetBotRequiredShards">
            <summary>
            Gets the minimum number of required shards for the current bot.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.Get">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetBot">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuild(Discore.Snowflake)">
            <summary>
            Gets a guild by ID.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateGuild(Discore.Http.CreateGuildOptions)">
            <summary>
            Creates a new guild.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyGuild(Discore.Snowflake,Discore.Http.ModifyGuildOptions)">
            <summary>
            Changes the settings of a guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteGuild(Discore.Snowflake)">
            <summary>
            Deletes a guild permanently.
            <para>Note: current bot must be the owner.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildBans(Discore.Snowflake)">
            <summary>
            Gets a list of all users that are banned from the specified guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.BanMembers"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateGuildBan(Discore.Snowflake,Discore.Snowflake,System.Nullable{System.Int32})">
            <summary>
            Bans a users from the specified guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.BanMembers"/>.</para>
            </summary>
            <param name="deleteMessageDays">Number of days to delete messages for (0-7) or null to delete none.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.RemoveGuildBan(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Removes a user ban from the specified guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.BanMembers"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildPruneCount(Discore.Snowflake,System.Int32)">
            <summary>
            Returns the number of members that would be kicked from a guild prune operation.
            <para>Requires <see cref="F:Discore.DiscordPermission.KickMembers"/>.</para>
            </summary>
            <param name="days">The number of days to count prune for (1 or more).</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.BeginGuildPrune(Discore.Snowflake,System.Int32)">
            <summary>
            Begins a member prune operation, 
            kicking every member that has been offline for the specified number of days.
            <para>Requires <see cref="F:Discore.DiscordPermission.KickMembers"/>.</para>
            </summary>
            <param name="days">The number of days to prune (1 or more).</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildIntegrations(Discore.Snowflake)">
            <summary>
            Gets a list of integrations for the specified guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateGuildIntegration(Discore.Snowflake,Discore.Snowflake,System.String)">
            <summary>
            Attaches an integration from the current bot to the specified guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyGuildIntegration(Discore.Snowflake,Discore.Snowflake,Discore.Http.ModifyIntegrationOptions)">
            <summary>
            Changes the attributes of a guild integration.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteGuildIntegration(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Deletes an attached integration from the specified channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.SyncGuildIntegration(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Synchronizes a guild integration.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildEmbed(Discore.Snowflake)">
            <summary>
            Returns the embed for the specified guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyGuildEmbed(Discore.Snowflake,Discore.Http.ModifyGuildEmbedOptions)">
            <summary>
            Modifies the properties of the embed for the specified guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetInvite(System.String)">
            <summary>
            Gets an invite by its code.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the invite code is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteInvite(System.String)">
            <summary>
            Deletes an invite to a channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the invite code is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildInvites(Discore.Snowflake)">
            <summary>
            Gets a list of invites for the specified guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageGuild"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetChannelInvites(Discore.Snowflake)">
            <summary>
            Gets a list of all invites for the specified guild channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageChannels"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateChannelInvite(Discore.Snowflake,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Creates a new invite for the specified guild channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.CreateInstantInvite"/>.</para>
            </summary>
            <param name="channelId">The ID of the guild channel.</param>
            <param name="maxAge">The duration of invite before expiry, or 0 or null for never.</param>
            <param name="maxUses">The max number of uses or 0 or null for unlimited.</param>
            <param name="temporary">Whether this invite only grants temporary membership.</param>
            <param name="unique">
            If true, don't try to reuse a similar invite 
            (useful for creating many unique one time use invites).
            </param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildMember(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Gets a member in a guild by their user ID.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ListGuildMembers(Discore.Snowflake,System.Nullable{System.Int32},System.Nullable{Discore.Snowflake})">
            <summary>
            Gets a list of members in a guild.
            This method is paged, and cannot always return every member at once.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="limit">Max number of members to return (1-1000).</param>
            <param name="after">The highest user ID in the previous page.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyGuildMember(Discore.Snowflake,Discore.Snowflake,Discore.Http.ModifyGuildMemberOptions)">
            <summary>
            Modifies the attributes of a guild member.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyCurrentUsersNickname(Discore.Snowflake,System.String)">
            <summary>
            Modifies the current bot's nickname in the specified guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ChangeNickname"/>.</para>
            </summary>
            <param name="nickname">The new nickname (or null or an empty string to remove nickname).</param>
            <returns>Returns the new nickname (or null if the nickname was removed).</returns>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.RemoveGuildMember(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Removes a member from a guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.KickMembers"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetChannelMessages(Discore.Snowflake,System.Nullable{Discore.Snowflake},System.Nullable{System.Int32},Discore.Http.MessageGetStrategy)">
            <summary>
            Gets messages from a text channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ReadMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetChannelMessage(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Gets a single message by ID from a channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ReadMessageHistory"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateMessage(Discore.Snowflake,System.String)">
            <summary>
            Posts a message to a text channel.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateMessage(Discore.Snowflake,Discore.Http.CreateMessageOptions)">
            <summary>
            Posts a message to a text channel.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendTtsMessages"/> if TTS is enabled on the message.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateMessage(Discore.Snowflake,System.IO.Stream,System.String,Discore.Http.CreateMessageOptions)">
            <summary>
            Posts a message to a text channel with a file attachment.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendTtsMessages"/> if TTS is enabled on the message.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="fileData"/> is null, 
            or if <paramref name="fileName"/> is null or only contains whitespace characters.
            </exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateMessage(Discore.Snowflake,System.ArraySegment{System.Byte},System.String,Discore.Http.CreateMessageOptions)">
            <summary>
            Posts a message to a text channel with a file attachment.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendTtsMessages"/> if TTS is enabled on the message.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="fileName"/> is null or only contains whitespace characters.
            </exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateMessage(Discore.Snowflake,System.Net.Http.HttpContent,System.String,Discore.Http.CreateMessageOptions)">
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.EditMessage(Discore.Snowflake,Discore.Snowflake,System.String)">
            <summary>
            Edits an existing message in a text channel.
            <para>Note: only messages created by the current bot can be editted.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.EditMessage(Discore.Snowflake,Discore.Snowflake,Discore.Http.EditMessageOptions)">
            <summary>
            Edits an existing message in a text channel.
            <para>Note: only messages created by the current bot can be editted.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteMessage(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Deletes a message from a text channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.BulkDeleteMessages(Discore.Snowflake,System.Collections.Generic.IEnumerable{Discore.DiscordMessage},System.Boolean)">
            <summary>
            Deletes a group of messages all at once from a text channel.
            This is much faster than calling DeleteMessage for each message.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <param name="filterTooOldMessages">Whether to ignore deleting messages that are older than 2 weeks (this causes an API error).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.BulkDeleteMessages(Discore.Snowflake,System.Collections.Generic.IEnumerable{Discore.Snowflake},System.Boolean)">
            <summary>
            Deletes a group of messages all at once from a text channel.
            This is much faster than calling DeleteMessage for each message.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <param name="filterTooOldMessages">Whether to ignore deleting messages that are older than 2 weeks (this causes an API error).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetPinnedMessages(Discore.Snowflake)">
            <summary>
            Gets a list of all pinned messages in a text channel.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.AddPinnedChannelMessage(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Pins a message in a text channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeletePinnedChannelMessage(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Unpins a message from a text channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateReaction(Discore.Snowflake,Discore.Snowflake,Discore.DiscordReactionEmoji)">
            <summary>
            Adds a reaction to a message.
            <para>Requires <see cref="F:Discore.DiscordPermission.ReadMessageHistory"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.AddReactions"/> if nobody else has reacted to the message prior.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteOwnReaction(Discore.Snowflake,Discore.Snowflake,Discore.DiscordReactionEmoji)">
            <summary>
            Deletes a reaction that the current bot has added to a message.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteUserReaction(Discore.Snowflake,Discore.Snowflake,Discore.Snowflake,Discore.DiscordReactionEmoji)">
            <summary>
            Deletes a reaction posted by any user.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetReactions(Discore.Snowflake,Discore.Snowflake,Discore.DiscordReactionEmoji,System.Nullable{Discore.Snowflake},System.Nullable{System.Int32},Discore.Http.ReactionGetStrategy)">
            <summary>
            Gets a paginated list of users who reacted to the specified message with the specified emoji.
            </summary>
            <param name="baseUserId">The user ID to start at when retrieving reactions.</param>
            <param name="limit">The maximum number of reactions to return or null to use the default.</param>
            <param name="getStrategy">The pagination strategy to use based on <paramref name="baseUserId"/>.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteAllReactions(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Deletes all reactions on a message.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildRoles(Discore.Snowflake)">
            <summary>
            Gets a list of all roles in a guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateGuildRole(Discore.Snowflake,Discore.Http.CreateRoleOptions)">
            <summary>
            Creates a new role for a guild.
            </summary>
            <param name="options">A set of optional options to use when creating the role.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyGuildRolePositions(Discore.Snowflake,System.Collections.Generic.IEnumerable{Discore.Http.PositionOptions})">
            <summary>
            Modifies the sorting positions of roles in a guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyGuildRole(Discore.Snowflake,Discore.Snowflake,Discore.Http.ModifyRoleOptions)">
            <summary>
            Modifies the settings of a guild role.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteGuildRole(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Deletes a role from a guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.AddGuildMemberRole(Discore.Snowflake,Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Adds a role to a guild member.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.RemoveGuildMemberRole(Discore.Snowflake,Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Removes a role from a guild member.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetCurrentUser">
            <summary>
            Gets the user object of the current bot.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetUser(Discore.Snowflake)">
            <summary>
            Gets a user by their ID.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyCurrentUser(System.String,Discore.DiscordImageData)">
            <summary>
            Modifies the current bot's user object.
            Parameters left null will leave the properties unchanged.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetCurrentUserGuilds(System.Nullable{System.Int32},System.Nullable{Discore.Snowflake},Discore.Http.GuildGetStrategy)">
            <summary>
            Gets a list of user guilds the current bot is in.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.LeaveGuild(Discore.Snowflake)">
            <summary>
            Removes the current bot from the specified guild.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetUserDMs">
            <summary>
            Gets a list of currently opened DM channels for the current bot.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateDM(Discore.Snowflake)">
            <summary>
            Opens a DM channel with the specified user.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ListVoiceRegions">
            <summary>
            Gets a list of available voice regions.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildVoiceRegions(Discore.Snowflake)">
            <summary>
            Gets a list of all voice regions available to the specified guild.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.CreateWebhook(System.String,Discore.DiscordImageData,Discore.Snowflake)">
            <summary>
            Creates a webhook.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageWebhooks"/>.</para>
            </summary>
            <param name="channelId">The ID of the channel the webhook will post to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or <paramref name="avatar"/> is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetWebhook(Discore.Snowflake)">
            <summary>
            Gets a webhook via its ID.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetWebhookWithToken(Discore.Snowflake,System.String)">
            <summary>
            Gets a webhook via its ID.
            <para>This call does not require authentication and returns no user in the webhook object.</para>
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if token is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetChannelWebhooks(Discore.Snowflake)">
            <summary>
            Gets a list of webhooks active for the specified guild text channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageWebhooks"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.GetGuildWebhooks(Discore.Snowflake)">
            <summary>
            Gets a list of all webhooks in a guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageWebhooks"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyWebhook(Discore.Snowflake,System.String,Discore.DiscordImageData,System.Nullable{Discore.Snowflake})">
            <summary>
            Modifies an existing webhook.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageWebhooks"/>.</para>
            </summary>
            <param name="channelId">The ID of the text channel to move the webhook to (or null to not move).</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ModifyWebhookWithToken(Discore.Snowflake,System.String,System.String,Discore.DiscordImageData)">
            <summary>
            Modifies an existing webhook.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if token is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteWebhook(Discore.Snowflake)">
            <summary>
            Deletes a webhook permanently. The current bot must be the owner.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageWebhooks"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.DeleteWebhookWithToken(Discore.Snowflake,System.String)">
            <summary>
            Deletes a webhook permanently.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if token is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ExecuteWebhook(Discore.Snowflake,System.String,Discore.Http.ExecuteWebhookOptions,System.Boolean)">
            <summary>
            Executes a webhook.
            <para>Note: Returns null unless <paramref name="waitAndReturnMessage"/> is set to true.</para>
            </summary>
            <param name="webhookId">The ID of the webhook to execute.</param>
            <param name="token">The webhook's token.</param>
            <param name="waitAndReturnMessage">Whether to wait for the message to be created 
            and have it returned from this method.</param>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the token or <paramref name="options"/> is null.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ExecuteWebhook(Discore.Snowflake,System.String,System.IO.Stream,System.String,Discore.Http.ExecuteWebhookOptions,System.Boolean)">
            <summary>
            Executes a webhook with a file attachment.
            <para>Note: Returns null unless <paramref name="waitAndReturnMessage"/> is set to true.</para>
            </summary>
            <param name="webhookId">The ID of the webhook to execute.</param>
            <param name="token">The webhook's token.</param>
            <param name="waitAndReturnMessage">Whether to wait for the message to be created 
            and have it returned from this method.</param>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the token is null, 
            or <paramref name="fileData"/> is null,
            or the file name is null, empty, or only contains whitespace characters.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ExecuteWebhook(Discore.Snowflake,System.String,System.ArraySegment{System.Byte},System.String,Discore.Http.ExecuteWebhookOptions,System.Boolean)">
            <summary>
            Executes a webhook with a file attachment.
            <para>Note: Returns null unless <paramref name="waitAndReturnMessage"/> is set to true.</para>
            </summary>
            <param name="webhookId">The ID of the webhook to execute.</param>
            <param name="token">The webhook's token.</param>
            <param name="waitAndReturnMessage">Whether to wait for the message to be created 
            and have it returned from this method.</param>
            <exception cref="T:System.ArgumentException">Thrown if the token is empty or only contains whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the token is null 
            or the file name is null, empty, or only contains whitespace characters.</exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.DiscordHttpClient.ExecuteWebhook(Discore.Snowflake,System.String,System.Net.Http.HttpContent,System.String,Discore.Http.ExecuteWebhookOptions,System.Boolean)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="T:Discore.Http.DiscordHttpErrorCode">
            <summary>
            Error codes returned by the discord HTTP API.
            https://github.com/hammerandchisel/discord-api-docs/blob/master/docs/topics/RESPONSE_CODES.md#json-error-response
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.None">
            <summary>
            An unknown error occured, this most likely signifies that an internal error occured on Discord's end.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.TooManyRequests">
            <summary>
            The request failed because the application was rate limited.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.BotsNotAllowed">
            <summary>
            Reason: Bots cannot use this endpoint.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.OnlyBotsAllowed">
            <summary>
            Reason: Only bots can use this endpoint.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.MaximumGuildsReached">
            <summary>
            Maximum guilds: 100
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.MaximumPinsReached">
            <summary>
            Maximum pinned messages: 50
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.MaximumGuildRolesReached">
            <summary>
            Maximum guild roles: 250
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.MaximumGuildChannelsReached">
            <summary>
            Maximum guild channels: 500
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.InvalidDMChannelAction">
            <summary>
            Reason: Cannot execute action on a DM channel.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.InvalidMessageAuthorEdit">
            <summary>
            Reason: Cannot edit a message created by a different user.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.MessageEmpty">
            <summary>
            Reason: Cannot send an empty message.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.CannotMessageUser">
            <summary>
            Reason: Cannot send messages to this user.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.CannotMessageVoiceChannel">
            <summary>
            Reason: Cannot send message in a voice channel.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.ChannelVerificationError">
            <summary>
            Reason: Channel verification level is too high.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.OAuth2AppMissingBot">
            <summary>
            Reason: OAuth2 application does not have a bot.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.OAuth2AppLimitReached">
            <summary>
            Reason: OAuth2 application limit reached.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.NoteTooLong">
            <summary>
            Reason: Note is too long.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.InvalidBulkDelete">
            <summary>
            Reason: Provided too few or too many messages to delete.
            <para>Must provide at least 2 and fewer than 100 messages to delete.</para>
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.InvalidMessagePin">
            <summary>
            Reason: A message can only be pinned to the channel it was created in.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.InvalidMessageTarget">
            <summary>
            Reason: Cannot execute action on a system message.
            </summary>
        </member>
        <member name="F:Discore.Http.DiscordHttpErrorCode.InvalidBulkDeleteMessageAge">
            <summary>
            Reason: A message provided was too old to bulk delete.
            </summary>
        </member>
        <member name="T:Discore.Http.DiscordHttpRateLimitException">
            <summary>
            An exception representing a 429 error sent by the Discord HTTP API.
            </summary>
        </member>
        <member name="P:Discore.Http.DiscordHttpRateLimitException.IsGlobal">
            <summary>
            Whether this is a global rate limit.
            </summary>
        </member>
        <member name="P:Discore.Http.DiscordHttpRateLimitException.Limit">
            <summary>
            The maximum number of requests that can be made until the reset time.
            <para>Note: Only set if not a global rate limit.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.DiscordHttpRateLimitException.Reset">
            <summary>
            Epoch time (seconds since 00:00:00 UTC on January 1, 1970) at which the rate limit resets.
            <para>Note: Only set if not a global rate limit.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.DiscordHttpRateLimitException.RetryAfter">
            <summary>
            The time in milliseconds that needs to be waited before sending another request.
            </summary>
        </member>
        <member name="P:Discore.Http.EditMessageOptions.Content">
            <summary>
            Gets or sets the content of the message.
            </summary>
        </member>
        <member name="P:Discore.Http.EditMessageOptions.Embed">
            <summary>
            Gets or sets the embed within the message.
            </summary>
        </member>
        <member name="M:Discore.Http.EditMessageOptions.SetContent(System.String)">
            <summary>
            Sets the content of the message.
            </summary>
        </member>
        <member name="M:Discore.Http.EditMessageOptions.SetEmbed(Discore.Http.EmbedOptions)">
            <summary>
            Sets the embed within the message.
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.EmbedFooter.Text">
            <summary>
            Gets or sets the text content of the footer.
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.EmbedFooter.IconUrl">
            <summary>
            Gets or sets the URL of the icon to display in the footer (or null to omit).
            <para>To use attachments uploaded alongside the embed, use the format: attachment://FILENAME_WITH_EXT</para>
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.EmbedAuthor.Name">
            <summary>
            Gets or sets the author's name.
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.EmbedAuthor.Url">
            <summary>
            Gets or sets the URL to the author (or null to omit).
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.EmbedAuthor.IconUrl">
            <summary>
            Gets or sets the URL to the icon of the author (or null to omit).
            <para>To use attachments uploaded alongside the embed, use the format: attachment://FILENAME_WITH_EXT</para>
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.EmbedField.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.EmbedField.Value">
            <summary>
            Gets or sets the value of the field.
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.EmbedField.IsInline">
            <summary>
            Gets or sets whether the field should display inline with other inline fields.
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.Title">
            <summary>
            Gets or sets the title of the embed (or null to omit).
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.Description">
            <summary>
            Gets or sets the description of the embed (or null to omit).
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.Url">
            <summary>
            Gets or sets the URL that the embed links to (or null to omit).
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.Timestamp">
            <summary>
            Gets or sets the timestamp on the embed (or null to omit).
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.Color">
            <summary>
            Gets or sets the color of the embed (or null to use default).
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.Footer">
            <summary>
            Gets or sets the footer of the embed (or null to omit).
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.ImageUrl">
            <summary>
            Gets or sets the URL of the image to include in the embed (or null to omit).
            <para>To use attachments uploaded alongside the embed, use the format: attachment://FILENAME_WITH_EXT</para>
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.Author">
            <summary>
            Gets or sets the author of the embed (or null to omit).
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.ThumbnailUrl">
            <summary>
            Gets or sets the URL of the thumbnail for the embed (or null to omit).
            </summary>
        </member>
        <member name="P:Discore.Http.EmbedOptions.Fields">
            <summary>
            Gets or sets the fields to include in the embed (or null to omit).
            </summary>
        </member>
        <member name="M:Discore.Http.EmbedOptions.SetTitle(System.String)">
            <summary>
            Sets the title of the embed.
            </summary>
        </member>
        <member name="M:Discore.Http.EmbedOptions.SetDescription(System.String)">
            <summary>
            Sets the description of the embed.
            </summary>
        </member>
        <member name="M:Discore.Http.EmbedOptions.SetUrl(System.String)">
            <summary>
            Sets the URL that the embed links to.
            </summary>
        </member>
        <member name="M:Discore.Http.EmbedOptions.SetTimestamp(System.DateTime)">
            <summary>
            Sets the timestamp on the embed.
            </summary>
        </member>
        <member name="M:Discore.Http.EmbedOptions.SetColor(Discore.DiscordColor)">
            <summary>
            Sets the color of the embed.
            </summary>
        </member>
        <member name="M:Discore.Http.EmbedOptions.SetFooter(System.String,System.String)">
            <summary>
            Sets the footer of the embed.
            </summary>
            <param name="iconUrl">
            The URL of the icon to display in the footer.
            <para>To use attachments uploaded alongside the embed, use the format: attachment://FILENAME_WITH_EXT</para>
            </param>
        </member>
        <member name="M:Discore.Http.EmbedOptions.SetImage(System.String)">
            <summary>
            Sets the URL of the image to include in the embed.
            <para>To use attachments uploaded alongside the embed, use the format: attachment://FILENAME_WITH_EXT</para>
            </summary>
        </member>
        <member name="M:Discore.Http.EmbedOptions.SetAuthor(System.String,System.String,System.String)">
            <summary>
            Sets the author of the embed.
            </summary>
            <param name="iconUrl">
            The URL of the author's icon.
            <para>To use attachments uploaded alongside the embed, use the format: attachment://FILENAME_WITH_EXT</para>
            </param>
        </member>
        <member name="M:Discore.Http.EmbedOptions.SetThumbnail(System.String)">
            <summary>
            Sets the URL of the thumbnail for the embed.
            <para>To use attachments uploaded alongside the embed, use the format: attachment://FILENAME_WITH_EXT</para>
            </summary>
        </member>
        <member name="M:Discore.Http.EmbedOptions.AddField(System.String,System.String,System.Boolean)">
            <summary>
            Adds a field to the embed.
            </summary>
            <param name="inline">Whether the field should display inline with other inline fields.</param>
        </member>
        <member name="P:Discore.Http.ExecuteWebhookOptions.UsernameOverride">
            <summary>
            Gets or sets the username to override the webhook's normal username with (or null to not override).
            </summary>
        </member>
        <member name="P:Discore.Http.ExecuteWebhookOptions.AvatarUrl">
            <summary>
            Gets or sets the URL of the avatar to override the webhook's normal avatar with (or null to not override).
            </summary>
        </member>
        <member name="P:Discore.Http.ExecuteWebhookOptions.TextToSpeech">
            <summary>
            Gets or sets whether the created message should use text-to-speech (or null to default to false).
            </summary>
        </member>
        <member name="P:Discore.Http.ExecuteWebhookOptions.Content">
            <summary>
            Gets or sets the text content to include in the message (or null to only use embeds and/or attachments).
            </summary>
        </member>
        <member name="P:Discore.Http.ExecuteWebhookOptions.Embeds">
            <summary>
            Gets or sets embeds to include in the created message (or null to only use text content and/or attachments).
            </summary>
        </member>
        <member name="M:Discore.Http.ExecuteWebhookOptions.SetUsernameOverride(System.String)">
            <summary>
            Sets the username to override the webhook's normal username with.
            </summary>
        </member>
        <member name="M:Discore.Http.ExecuteWebhookOptions.SetAvatarOverride(System.String)">
            <summary>
            Sets the URL of the avatar to override the webhook's normal avatar with.
            </summary>
        </member>
        <member name="M:Discore.Http.ExecuteWebhookOptions.SetTextToSpeech(System.Boolean)">
            <summary>
            Sets whether the created message should use text-to-speech.
            </summary>
        </member>
        <member name="M:Discore.Http.ExecuteWebhookOptions.SetContent(System.String)">
            <summary>
            Sets the text content to include in the message.
            </summary>
        </member>
        <member name="M:Discore.Http.ExecuteWebhookOptions.SetEmbed(Discore.Http.EmbedOptions)">
            <summary>
            Sets the embed to be included in the created message.
            </summary>
        </member>
        <member name="M:Discore.Http.ExecuteWebhookOptions.SetEmbeds(System.Collections.Generic.IEnumerable{Discore.Http.EmbedOptions})">
            <summary>
            Sets the embeds to be included in the created message.
            </summary>
        </member>
        <member name="T:Discore.Http.GuildCategoryChannelOptions">
            <summary>
            An optional set of parameters for modifying a guild category channel.
            </summary>
        </member>
        <member name="P:Discore.Http.GuildCategoryChannelOptions.Name">
            <summary>
            Gets or sets the name of the channel (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.GuildCategoryChannelOptions.Position">
            <summary>
            Gets or sets the sorting position of the channel (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.GuildCategoryChannelOptions.PermissionOverwrites">
            <summary>
            Gets or sets the list of permission overwrites (or null to leave unchanged).
            </summary>
        </member>
        <member name="M:Discore.Http.GuildCategoryChannelOptions.SetName(System.String)">
            <summary>
            Sets the name of the channel.
            </summary>
        </member>
        <member name="M:Discore.Http.GuildCategoryChannelOptions.SetPosition(System.Int32)">
            <summary>
            Sets the sorting position of the channel.
            </summary>
        </member>
        <member name="M:Discore.Http.GuildCategoryChannelOptions.SetPermissionOverwrites(System.Collections.Generic.IList{Discore.Http.OverwriteOptions})">
            <summary>
            Sets the list of permission overwrites.
            </summary>
        </member>
        <member name="T:Discore.Http.GuildGetStrategy">
            <summary>
            Represents a pagination strategy used when retrieving guilds from the Discord API.
            </summary>
        </member>
        <member name="F:Discore.Http.GuildGetStrategy.Before">
            <summary>
            Will return guilds before the guild ID.
            </summary>
        </member>
        <member name="F:Discore.Http.GuildGetStrategy.After">
            <summary>
            Will return guilds after the guild ID.
            </summary>
        </member>
        <member name="T:Discore.Http.GuildTextChannelOptions">
            <summary>
            An optional set of parameters for modifying a guild text channel.
            </summary>
        </member>
        <member name="P:Discore.Http.GuildTextChannelOptions.Name">
            <summary>
            Gets or sets the name of the channel (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.GuildTextChannelOptions.Position">
            <summary>
            Gets or sets the sorting position of the channel (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.GuildTextChannelOptions.Topic">
            <summary>
            Gets or sets the topic of the text channel (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.GuildTextChannelOptions.Nsfw">
            <summary>
            Gets or sets whether this text channel is NSFW (not-safe-for-work) (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.GuildTextChannelOptions.ParentId">
            <summary>
            Gets or sets the ID of the parent category channel (or null to leave unchanged).
            <para>Note: Set to <see cref="F:Discore.Snowflake.None"/> to clear the parent ID.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.GuildTextChannelOptions.PermissionOverwrites">
            <summary>
            Gets or sets the list of permission overwrites (or null to leave unchanged).
            </summary>
        </member>
        <member name="M:Discore.Http.GuildTextChannelOptions.SetName(System.String)">
            <summary>
            Sets the name of the channel.
            </summary>
        </member>
        <member name="M:Discore.Http.GuildTextChannelOptions.SetPosition(System.Int32)">
            <summary>
            Sets the sorting position of the channel.
            </summary>
        </member>
        <member name="M:Discore.Http.GuildTextChannelOptions.SetTopic(System.String)">
            <summary>
            Sets the topic of the text channel.
            </summary>
        </member>
        <member name="M:Discore.Http.GuildTextChannelOptions.SetNsfw(System.Boolean)">
            <summary>
            Sets whether this text channel is NSFW (not-safe-for-work).
            </summary>
        </member>
        <member name="M:Discore.Http.GuildTextChannelOptions.SetParentId(Discore.Snowflake)">
            <summary>
            Sets the ID of the parent category channel.
            </summary>
            <param name="parentId">
            The ID of the category to use as a parent or <see cref="F:Discore.Snowflake.None"/> to clear the parent ID.
            </param>
        </member>
        <member name="M:Discore.Http.GuildTextChannelOptions.SetPermissionOverwrites(System.Collections.Generic.IList{Discore.Http.OverwriteOptions})">
            <summary>
            Sets the list of permission overwrites.
            </summary>
        </member>
        <member name="T:Discore.Http.GuildVoiceChannelOptions">
            <summary>
            An optional set of parameters for modifying a guild voice channel.
            </summary>
        </member>
        <member name="P:Discore.Http.GuildVoiceChannelOptions.Name">
            <summary>
            Gets or sets the name of the channel (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.GuildVoiceChannelOptions.Position">
            <summary>
            Gets or sets the sorting position of the channel (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.GuildVoiceChannelOptions.Bitrate">
            <summary>
            Gets or sets the bitrate of the voice channel (or null to leave unchanged). 
            </summary>
        </member>
        <member name="P:Discore.Http.GuildVoiceChannelOptions.UserLimit">
            <summary>
            Gets or sets the user limit of the voice channel (or null to leave unchanged).
            <para>Set to zero to remove the user limit.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.GuildVoiceChannelOptions.ParentId">
            <summary>
            Gets or sets the ID of the parent category channel (or null to leave unchanged).
            <para>Note: Set to <see cref="F:Discore.Snowflake.None"/> to clear the parent ID.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.GuildVoiceChannelOptions.PermissionOverwrites">
            <summary>
            Gets or sets the list of permission overwrites (or null to leave unchanged).
            </summary>
        </member>
        <member name="M:Discore.Http.GuildVoiceChannelOptions.SetName(System.String)">
            <summary>
            Sets the name of the channel.
            </summary>
        </member>
        <member name="M:Discore.Http.GuildVoiceChannelOptions.SetPosition(System.Int32)">
            <summary>
            Sets the sorting position of the channel.
            </summary>
        </member>
        <member name="M:Discore.Http.GuildVoiceChannelOptions.SetBitrate(System.Int32)">
            <summary>
            Sets the bitrate of the voice channel.
            </summary>
        </member>
        <member name="M:Discore.Http.GuildVoiceChannelOptions.SetUserLimit(System.Int32)">
            <summary>
            Sets the user limit of the voice channel.
            </summary>
            <param name="userLimit">The maximum number of users or zero to remove the limit.</param>
        </member>
        <member name="M:Discore.Http.GuildVoiceChannelOptions.SetParentId(Discore.Snowflake)">
            <summary>
            Sets the ID of the parent category channel.
            </summary>
            <param name="parentId">
            The ID of the category to use as a parent or <see cref="F:Discore.Snowflake.None"/> to clear the parent ID.
            </param>
        </member>
        <member name="M:Discore.Http.GuildVoiceChannelOptions.SetPermissionOverwrites(System.Collections.Generic.IList{Discore.Http.OverwriteOptions})">
            <summary>
            Sets the list of permission overwrites.
            </summary>
        </member>
        <member name="T:Discore.Http.MessageGetStrategy">
            <summary>
            Represents a pagination strategy used when retrieving messages from the Discord API.
            </summary>
        </member>
        <member name="F:Discore.Http.MessageGetStrategy.Around">
            <summary>
            Will return messages before and after the base message.
            </summary>
        </member>
        <member name="F:Discore.Http.MessageGetStrategy.Before">
            <summary>
            Will return messages before the base message.
            </summary>
        </member>
        <member name="F:Discore.Http.MessageGetStrategy.After">
            <summary>
            Will return messages after the base message.
            </summary>
        </member>
        <member name="T:Discore.Http.ModifyGuildEmbedOptions">
            <summary>
            A set of options used to modify the properties of a guild embed.
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildEmbedOptions.Enabled">
            <summary>
            Gets or sets whether the embed is enabled.
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildEmbedOptions.ChannelId">
            <summary>
            Gets or sets the ID of the guild channel this embed is for.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildEmbedOptions.SetEnabled(System.Boolean)">
            <summary>
            Sets whether the embed is enabled.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildEmbedOptions.SetChannel(Discore.Snowflake)">
            <summary>
            Sets the ID of the guild channel this embed is for.
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildEmojiOptions.Name">
            <summary>
            Gets or sets the name of the emoji (or null to leave unchanged).
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildEmojiOptions.SetName(System.String)">
            <summary>
            Sets the name of the emoji.
            </summary>
        </member>
        <member name="T:Discore.Http.ModifyGuildMemberOptions">
            <summary>
            An optional set of parameters to change the attributes of a guild member.
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildMemberOptions.Nickname">
            <summary>
            Gets or sets the member's nickname for the guild (or null to leave unchanged).
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageNicknames"/>.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildMemberOptions.RoleIds">
            <summary>
            Gets or sets a list of IDs for each role the member is to be assigned to (or null to leave unchanged).
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildMemberOptions.IsServerMute">
            <summary>
            Gets or sets whether the member is server muted (or null to leave unchanged).
            <para>Requires <see cref="F:Discore.DiscordPermission.MuteMembers"/>.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildMemberOptions.IsServerDeaf">
            <summary>
            Gets or sets whether the member is server deafened (or null to leave unchanged).
            <para>Requires <see cref="F:Discore.DiscordPermission.DeafenMembers"/>.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildMemberOptions.ChannelId">
            <summary>
            Gets or sets the ID of the voice channel to move the member to if they are currently connected to voice 
            (or null to leave unchanged).
            <para>The current bot must have permission to connect to this channel.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.MoveMembers"/>.</para>
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildMemberOptions.SetNickname(System.String)">
            <summary>
            Sets the member's nickname for the guild.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageNicknames"/>.</para>
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildMemberOptions.SetRoles(System.Collections.Generic.IEnumerable{Discore.Snowflake})">
            <summary>
            Sets the roles the member is to be assigned to.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageRoles"/>.</para>
            </summary>
            <param name="roleIds">A list of IDs for each role the member is to be assigned to.</param>
        </member>
        <member name="M:Discore.Http.ModifyGuildMemberOptions.SetServerMute(System.Boolean)">
            <summary>
            Sets whether the member is server mute.
            <para>Requires <see cref="F:Discore.DiscordPermission.MuteMembers"/>.</para>
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildMemberOptions.SetServerDeaf(System.Boolean)">
            <summary>
            Sets whether the member is server deafened.
            <para>Requires <see cref="F:Discore.DiscordPermission.DeafenMembers"/>.</para>
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildMemberOptions.SetVoiceChannel(Discore.Snowflake)">
            <summary>
            Sets the ID of the voice channel to move the member to (if they are currently connected to voice).
            <para>The current bot must have permission to connect to this channel.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.MoveMembers"/>.</para>
            </summary>
        </member>
        <member name="T:Discore.Http.ModifyGuildOptions">
            <summary>
            An optional set of parameters for modifying a guild.
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildOptions.Name">
            <summary>
            Gets or sets the guild name (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildOptions.VoiceRegion">
            <summary>
            Gets or sets the ID of the voice region the guild will use (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildOptions.VerificationLevel">
            <summary>
            Gets or sets the required verification level (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildOptions.DefaultMessageNotifications">
            <summary>
            Gets or sets the default message notification setting to be used by new members entering the guild
            (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildOptions.AfkChannelId">
            <summary>
            Gets or sets the ID of the AFK voice channel (or null to leave unchanged).
            <para>Set to <see cref="F:Discore.Snowflake.None"/> to remove the AFK channel.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildOptions.AfkTimeout">
            <summary>
            Gets or sets the time (in seconds) a member must be idle before being moved to the AFK channel 
            (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildOptions.Icon">
            <summary>
            Gets or sets the icon for the guild (or null to leave unchanged).
            <para>Set to <see cref="F:Discore.DiscordImageData.None"/> to remove the icon.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildOptions.OwnerId">
            <summary>
            Gets or sets the ID of the user to transfer guild ownership to (or null to leave unchanged) 
            (the current bot must be guild owner).
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildOptions.Splash">
            <summary>
            Gets or sets the image splash for the guild (or null to leave unchanged) (VIP guilds only).
            <para>Set to <see cref="F:Discore.DiscordImageData.None"/> to remove the splash.</para>
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyGuildOptions.SystemChannelId">
            <summary>
            Gets or sets the ID of the text channel which system messages are sent to (or null to leave unchanged).
            <para>Set to <see cref="F:Discore.Snowflake.None"/> to remove the system channel.</para>
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildOptions.SetName(System.String)">
            <summary>
            Sets the name of the guild.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildOptions.SetVoiceRegion(System.String)">
            <summary>
            Sets the voice region the guild will use.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildOptions.SetVerificationLevel(System.Int32)">
            <summary>
            Sets the required verification level for the guild.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildOptions.SetDefaultMessageNotifications(System.Int32)">
            <summary>
            Sets the default message notification setting to be used by new members entering the guild.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildOptions.SetAfkChannel(Discore.Snowflake)">
            <summary>
            Sets the ID of the AFK channel for the guild.
            </summary>
            <param name="afkChannelId">The ID of the AFK channel or <see cref="F:Discore.Snowflake.None"/> to remove the AFK channel.</param>
        </member>
        <member name="M:Discore.Http.ModifyGuildOptions.SetAfkTimeout(System.Int32)">
            <summary>
            Sets the time (in seconds) a member must be idle before being moved to the AFK channel.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildOptions.SetIcon(Discore.DiscordImageData)">
            <summary>
            Sets the guild icon.
            </summary>
            <param name="icon">The avatar data or <see cref="F:Discore.DiscordImageData.None"/> to remove the icon.</param>
        </member>
        <member name="M:Discore.Http.ModifyGuildOptions.SetOwner(Discore.Snowflake)">
            <summary>
            Sets the ID of the user to transfer guild ownership to (the current bot must be guild owner).
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyGuildOptions.SetSplash(Discore.DiscordImageData)">
            <summary>
            Sets the image splash for the guild (VIP guilds only). 
            </summary>
            <param name="splash">The avatar data or <see cref="F:Discore.DiscordImageData.None"/> to remove the splash.</param>
        </member>
        <member name="M:Discore.Http.ModifyGuildOptions.SetSystemChannel(Discore.Snowflake)">
            <summary>
            Sets the ID of the text channel which system messages are sent to.
            </summary>
            <param name="systemChannelId">The ID of the system channel or <see cref="F:Discore.Snowflake.None"/> to remove the system channel.</param>
        </member>
        <member name="T:Discore.Http.ModifyIntegrationOptions">
            <summary>
            A set of parameters for modifying a guild integration.
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyIntegrationOptions.ExpireBehavior">
            <summary>
            Gets or sets the behavior to follow when the integration subscription lapses.
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyIntegrationOptions.ExpireGracePeriod">
            <summary>
            Gets or sets the period (in seconds) where the integration will ignore lapsed subscriptions.
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyIntegrationOptions.EnableEmoticons">
            <summary>
            Gets or sets whether emoticons should be synced for this integration (twitch only currently).
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyIntegrationOptions.SetExpireBehavior(System.Int32)">
            <summary>
            Sets the behavior for when the integration subscription lapses.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyIntegrationOptions.SetExpireGracePeriod(System.Int32)">
            <summary>
            Sets the period (in seconds) where the integration will ignore lapsed subscriptions.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyIntegrationOptions.SetEnableEmoticons(System.Boolean)">
            <summary>
            Sets whether emoticons should be synced for this integration (twitch only currently).
            </summary>
        </member>
        <member name="T:Discore.Http.ModifyRoleOptions">
            <summary>
            An optional set of parameters used for modifying a guild role.
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyRoleOptions.Name">
            <summary>
            Gets or sets the name of the role (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyRoleOptions.Permissions">
            <summary>
            Gets or sets the permissions granted by this role (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyRoleOptions.Color">
            <summary>
            Gets or sets the display color of the role (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyRoleOptions.IsHoisted">
            <summary>
            Gets or sets whether the role is displayed in the sidebar (or null to leave unchanged).
            </summary>
        </member>
        <member name="P:Discore.Http.ModifyRoleOptions.IsMentionable">
            <summary>
            Gets or sets whether the role is mentionable (or null to leave unchanged).
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyRoleOptions.SetName(System.String)">
            <summary>
            Sets the name of the role.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyRoleOptions.SetPermissions(Discore.DiscordPermission)">
            <summary>
            Sets the permissions granted by the role.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyRoleOptions.SetColor(Discore.DiscordColor)">
            <summary>
            Sets the display color of the role.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyRoleOptions.SetHoisted(System.Boolean)">
            <summary>
            Sets whether the role should be displayed in the sidebar.
            </summary>
        </member>
        <member name="M:Discore.Http.ModifyRoleOptions.SetMentionable(System.Boolean)">
            <summary>
            Sets whether the role is mentionable.
            </summary>
        </member>
        <member name="P:Discore.Http.Net.RateLimitHeaders.IsGlobal">
            <summary>
            X-RateLimit-Global. Whether this is a global rate limit. Can only be true if response status is 429.
            </summary>
        </member>
        <member name="P:Discore.Http.Net.RateLimitHeaders.Limit">
            <summary>
            X-RateLimit-Limit. The maximum number of requests that can be made until the reset time.
            </summary>
        </member>
        <member name="P:Discore.Http.Net.RateLimitHeaders.Remaining">
            <summary>
            X-RateLimit-Remaining. The number of remaining requests that can be made.
            </summary>
        </member>
        <member name="P:Discore.Http.Net.RateLimitHeaders.Reset">
            <summary>
            X-RateLimit-Reset. Epoch time (seconds since 00:00:00 UTC on January 1, 1970) at which the rate limit resets.
            </summary>
        </member>
        <member name="P:Discore.Http.Net.RateLimitHeaders.RetryAfter">
            <summary>
            Retry-After. If set, the time in milliseconds that needs to be waited before sending another request.
            </summary>
        </member>
        <member name="M:Discore.Http.Net.RateLimitHeaders.ParseOrNull(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
            Extracts rate limit headers from the given HTTP response headers.
            Returns null if no rate limit headers are present.
            </summary>
        </member>
        <member name="M:Discore.Http.Net.RestClient.ParseResponse(System.Net.Http.HttpResponseMessage,Discore.Http.Net.RateLimitHeaders)">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.Net.RestClient.Send(System.Func{System.Net.Http.HttpRequestMessage},System.String,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.Net.RestClient.Get(System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.Net.RestClient.Post(System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.Net.RestClient.Post(System.String,Discore.DiscordApiData,System.String,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.Net.RestClient.Put(System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.Net.RestClient.Put(System.String,Discore.DiscordApiData,System.String,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.Net.RestClient.Patch(System.String,Discore.DiscordApiData,System.String,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.Http.Net.RestClient.Delete(System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="T:Discore.Http.OverwriteOptions">
            <summary>
            A set of parameters defining a permission overwrite.
            </summary>
        </member>
        <member name="P:Discore.Http.OverwriteOptions.Id">
            <summary>
            Gets the ID of the role or user that this overwrites.
            </summary>
        </member>
        <member name="P:Discore.Http.OverwriteOptions.Type">
            <summary>
            Gets the type the overwrite affects.
            </summary>
        </member>
        <member name="P:Discore.Http.OverwriteOptions.Allow">
            <summary>
            Gets or sets the allowed permissions to overwrite.
            </summary>
        </member>
        <member name="P:Discore.Http.OverwriteOptions.Deny">
            <summary>
            Gets or sets the denied permissions to overwrite.
            </summary>
        </member>
        <member name="M:Discore.Http.OverwriteOptions.SetAllowedPermissions(Discore.DiscordPermission)">
            <summary>
            Sets the allowed permissions to overwrite.
            </summary>
        </member>
        <member name="M:Discore.Http.OverwriteOptions.SetDeniedPermissions(Discore.DiscordPermission)">
            <summary>
            Sets the denied permissions to overwrite.
            </summary>
        </member>
        <member name="T:Discore.Http.PositionOptions">
            <summary>
            A set of parameters defining the position of an item such as a channel or role.
            </summary>
        </member>
        <member name="P:Discore.Http.PositionOptions.Id">
            <summary>
            Gets or sets the ID of the item to change the position of (e.g. a channel or role ID).
            </summary>
        </member>
        <member name="P:Discore.Http.PositionOptions.Position">
            <summary>
            Gets or sets the sorting position of the item. Note: Positions start at 1 not 0.
            </summary>
        </member>
        <member name="M:Discore.Http.PositionOptions.SetId(Discore.Snowflake)">
            <summary>
            Sets the ID of the item to change the position of (e.g. a channel or role ID).
            </summary>
        </member>
        <member name="M:Discore.Http.PositionOptions.SetPosition(System.Int32)">
            <summary>
            Sets the sorting position of the item. Note: Positions start at 1 not 0.
            </summary>
        </member>
        <member name="T:Discore.Http.ReactionGetStrategy">
            <summary>
            Represents a pagination strategy used when retrieving reactions from the Discord API.
            </summary>
        </member>
        <member name="F:Discore.Http.ReactionGetStrategy.Before">
            <summary>
            Will return reactions before the user ID.
            </summary>
        </member>
        <member name="F:Discore.Http.ReactionGetStrategy.After">
            <summary>
            Will return reactions after the user ID.
            </summary>
        </member>
        <member name="P:Discore.ITextChannel.Id">
            <summary>
            Gets the ID of this text channel.
            </summary>
        </member>
        <member name="P:Discore.ITextChannel.ChannelType">
            <summary>
            Gets the type of this channel.
            </summary>
        </member>
        <member name="M:Discore.ITextChannel.CreateMessage(System.String)">
            <summary>
            Creates a message in this channel.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            </summary>
            <param name="content">The message text content.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.ITextChannel.CreateMessage(Discore.Http.CreateMessageOptions)">
            <summary>
            Creates a message in this channel.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendTtsMessages"/> if TTS is enabled on the message.</para>
            </summary>
            <param name="options">The options of the message to create.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.ITextChannel.CreateMessage(System.IO.Stream,System.String,Discore.Http.CreateMessageOptions)">
            <summary>
            Posts a message with a file attachment.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendTtsMessages"/> if TTS is enabled on the message.</para>
            </summary>
            <param name="fileData">A stream of the file contents.</param>
            <param name="fileName">The name of the file to use when uploading.</param>
            <param name="options">Optional extra options of the message to create.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.ITextChannel.CreateMessage(System.ArraySegment{System.Byte},System.String,Discore.Http.CreateMessageOptions)">
            <summary>
            Posts a message with a file attachment.
            <para>Note: Bot user accounts must connect to the Gateway at least once before being able to send messages.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendMessages"/>.</para>
            <para>Requires <see cref="F:Discore.DiscordPermission.SendTtsMessages"/> if TTS is enabled on the message.</para>
            </summary>
            <param name="fileData">The file contents.</param>
            <param name="fileName">The name of the file to use when uploading.</param>
            <param name="options">Optional extra options of the message to create.</param>
            <returns>Returns the created message.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.ITextChannel.BulkDeleteMessages(System.Collections.Generic.IEnumerable{Discore.DiscordMessage},System.Boolean)">
            <summary>
            Deletes a list of messages in one API call.
            Much quicker than calling Delete() on each message instance.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            <para>Note: if this is a DM channel, this can only delete messages sent by the current bot.</para>
            </summary>
            <param name="filterTooOldMessages">Whether to ignore deleting messages that are older than 2 weeks 
            (messages that are too old cause an API error).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.ITextChannel.BulkDeleteMessages(System.Collections.Generic.IEnumerable{Discore.Snowflake},System.Boolean)">
            <summary>
            Deletes a list of messages in one API call.
            Much quicker than calling Delete() on each message instance.
            <para>Requires <see cref="F:Discore.DiscordPermission.ManageMessages"/>.</para>
            <para>Note: if this is a DM channel, this can only delete messages sent by the current bot.</para>
            </summary>
            <param name="filterTooOldMessages">Whether to ignore deleting messages that are older than 2 weeks 
            (messages that are too old cause an API error).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.ITextChannel.TriggerTypingIndicator">
            <summary>
            Causes the current bot's user to appear as typing in this channel.
            <para>Note: it is recommended that bots do not generally use this route.
            This should only be used if the bot is responding to a command that is expected
            to take a few seconds or longer.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.ITextChannel.GetMessage(Discore.Snowflake)">
            <summary>
            Gets a message in this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ReadMessageHistory"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.ITextChannel.GetMessages(Discore.Snowflake,System.Nullable{System.Int32},Discore.Http.MessageGetStrategy)">
            <summary>
            Gets a list of messages in this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ReadMessages"/>.</para>
            </summary>
            <param name="baseMessageId">The message ID the list will start at (is not included in the final list).</param>
            <param name="limit">Maximum number of messages to be returned.</param>
            <param name="getStrategy">The way messages will be located based on the <paramref name="baseMessageId"/>.</param>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.ITextChannel.GetPinnedMessages">
            <summary>
            Gets a list of all pinned messages in this channel.
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="M:Discore.ITextChannel.GetLastMessageId">
            <summary>
            Gets the ID of the last message sent in this channel.
            <para>Requires <see cref="F:Discore.DiscordPermission.ReadMessages"/>.</para>
            </summary>
            <exception cref="T:Discore.Http.DiscordHttpApiException"></exception>
        </member>
        <member name="T:Discore.Snowflake">
            <summary>
            Twitter's snowflake format. Used for IDs in the Discord Api.
            https://github.com/twitter/snowflake/tree/snowflake-2010
            </summary>
        </member>
        <member name="F:Discore.Snowflake.None">
            <summary>
            Gets a snowflake representing nothing (or zero).
            <para>
            This can be used when modifying objects such as guilds (e.g. setting/removing an AFK channel). 
            </para>
            <para>
            Leaving properties null when modifying a guild will cause them to be left unchanged. 
            However, <see cref="F:Discore.Snowflake.None"/> will clear the value (i.e. removing the AFK channel).
            </para>
            </summary>
        </member>
        <member name="M:Discore.Snowflake.Parse(System.String)">
            <summary>
            Parses a snowflake from a string.
            </summary>
        </member>
        <member name="M:Discore.Snowflake.ParseOrNull(System.String)">
            <summary>
            Attempts to parses a snowflake from a string,
            returns null if the parse failed.
            </summary>
        </member>
        <member name="M:Discore.Snowflake.TryParse(System.String,Discore.Snowflake@)">
            <summary>
            Attempts to parse a snowflake from a string.
            </summary>
        </member>
        <member name="M:Discore.TimeHelper.HasTickCountHit(System.Int32)">
            <summary>
            Checks if Environment.TickCount is equal to or has passed the specified number of ticks.
            Will handle the fact that Environment.TickCount wraps around after ~24 days.
            </summary>
        </member>
        <member name="F:Discore.Voice.DiscordVoiceConnection.PCM_BLOCK_SIZE">
            <summary>
            The byte size of a single PCM audio block.
            </summary>
        </member>
        <member name="E:Discore.Voice.DiscordVoiceConnection.OnConnected">
            <summary>
            Called when the voice connection first connects or reconnects.
            </summary>
        </member>
        <member name="E:Discore.Voice.DiscordVoiceConnection.OnInvalidated">
            <summary>
            Called when this voice connection is no longer useable. (eg. disconnected, error, failure to connect).
            </summary>
        </member>
        <member name="E:Discore.Voice.DiscordVoiceConnection.OnMemberSpeaking">
            <summary>
            Called when another user in the voice channel this connection is connected to changes their speaking state.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceConnection.Shard">
            <summary>
            Gets the shard this connection is managed by.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceConnection.GuildId">
            <summary>
            Gets the ID of the guild this voice connection is in.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceConnection.VoiceChannelId">
            <summary>
            Gets the ID of the current voice channel this connection is in.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if used before the connection has been initiated.</exception>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceConnection.IsConnected">
            <summary>
            Gets whether this connection is connected.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceConnection.IsConnecting">
            <summary>
            Gets whether this connection is currently performing its handshake.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceConnection.IsValid">
            <summary>
            Gets whether this connection is available to use.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceConnection.IsSpeaking">
            <summary>
            Gets or sets the speaking state of this connection.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceConnection.BytesToSend">
            <summary>
            Gets the number of unsent voice data bytes.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if used before being fully connected.</exception>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceConnection.IsPaused">
            <summary>
            Gets or sets whether the sending of voice data is paused.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if used before being fully connected.</exception>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.ConnectAsync(Discore.Snowflake,System.Boolean,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Initiates this voice connection.
            <para>
            Note: An <see cref="T:System.OperationCanceledException"/> will be thrown if the Gateway 
            connection is closed while initiating.
            </para>
            </summary>
            <param name="startMute">Whether the current bot should connect self-muted.</param>
            <param name="startDeaf">Whether the current bot should connect self-deafened.</param>
            <exception cref="T:Discore.DiscordPermissionException">
            Thrown if the current bot does not have permission to connect to the voice channel.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if connect is called more than once, 
            if the voice channel is full and the current bot is not an admin, 
            or if the shard behind this connection isn't running.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            Thrown if the give cancellation token is cancelled or the Gateway connection is closed while initiating the voice connection.
            </exception>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.AssertUserCanJoin(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Using the cache, this will attempt to verify that the current bot can
            join the selected voice channel. If the cache does not have the required details,
            this will NOT throw an exception (the handshake timeout will handle invalid permission anyway).
            </summary>
            <exception cref="T:Discore.DiscordPermissionException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.DisconnectAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Closes this voice connection.
            <para>Note: The connection will still be closed if the passed cancellation token is cancelled.</para>
            </summary>
            <param name="cancellationToken">A token which will force close the connection when cancelled.</param>
            <returns>Returns whether the operation was successful.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if this voice connection is not connected.</exception>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.DisconnectWithReasonAsync(Discore.Voice.VoiceConnectionInvalidationReason,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:System.InvalidOperationException">Thrown if this voice connection is not connected.</exception>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.CanSendVoiceData(System.Int32)">
            <summary>
            Gets whether the specified number of bytes can currently 
            be sent to this voice connection.
            Will return false if not yet connected or invalid.
            </summary>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.SendVoiceData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the specified PCM bytes to this voice connection.
            <para>
            The size of the data sent should be equal to or less than <see cref="F:Discore.Voice.DiscordVoiceConnection.PCM_BLOCK_SIZE"/>.
            </para>
            <para>
            Should be used along-side <see cref="M:Discore.Voice.DiscordVoiceConnection.CanSendVoiceData(System.Int32)"/> to
            avoid overflowing the buffer.
            </para>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of bytes will exceed the buffer size.
            </exception>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.SetSpeakingAsync(System.Boolean)">
            <summary>
            Sets the speaking state of this connection.
            </summary>
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the state fails to set because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.ClearVoiceBuffer">
            <summary>
            Clears all queued voice data.
            </summary>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.Dispose">
            <summary>
            Releases all resources used by this voice connection.
            <para>Note: this will not invalidate the voice connection.</para>
            </summary>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.CloseAndInvalidate(System.Net.WebSockets.WebSocketCloseStatus,System.String,Discore.Voice.VoiceConnectionInvalidationReason,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Ensures that: the WebSocket is closed, the UDP socket is closed, the user has left the voice channel,
            and the connection is invalidated.
            </summary>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceConnection.EnsureWebSocketIsClosed(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="T:Discore.Voice.DiscordVoiceRegion">
            <summary>
            A region for a voice server.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceRegion.Id">
            <summary>
            Gets the ID of the region.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceRegion.Name">
            <summary>
            Gets the name of the region.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceRegion.SampleHostname">
            <summary>
            Gets an example hostname for the region.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceRegion.SamplePort">
            <summary>
            Gets an example port for the region.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceRegion.IsVIPOnly">
            <summary>
            Gets whether this is a vip-only server.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceRegion.IsOptimal">
            <summary>
            Gets whether this server is the closest to the user's client.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceRegion.IsDeprecated">
            <summary>
            Gets whether this server is deprecated.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceRegion.IsCustom">
            <summary>
            Gets whether this is a custom voice region (used for events/etc.).
            </summary>
        </member>
        <member name="M:Discore.Voice.DiscordVoiceRegion.ToString">
            <summary>
            Returns the name of this voice region.
            </summary>
        </member>
        <member name="T:Discore.Voice.DiscordVoiceState">
            <summary>
            Used to represent a user's voice connection status.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceState.GuildId">
            <summary>
            Gets the ID of the guild this voice state is for.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceState.ChannelId">
            <summary>
            Gets the ID of the voice channel the user is in (or null if they are not in a voice channel).
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceState.UserId">
            <summary>
            Gets the ID of the user this voice state is for.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceState.SessionId">
            <summary>
            Gets the current session ID of this voice state.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceState.IsServerDeaf">
            <summary>
            Gets whether or not this user is server deaf.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceState.IsServerMute">
            <summary>
            Gets whether or not this user is server mute.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceState.IsSelfDeaf">
            <summary>
            Gets whether or not this user has deafened themself.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceState.IsSelfMute">
            <summary>
            Gets whether or not this user has muted themself.
            </summary>
        </member>
        <member name="P:Discore.Voice.DiscordVoiceState.IsSuppressed">
            <summary>
            Gets whether or not this user is muted by the active user connected to the API.
            </summary>
        </member>
        <member name="P:Discore.Voice.MemberSpeakingEventArgs.GuildId">
            <summary>
            Gets the ID of the guild that the user is speaking in.
            </summary>
        </member>
        <member name="P:Discore.Voice.MemberSpeakingEventArgs.UserId">
            <summary>
            Gets the ID of the user who started/stopped speaking.
            </summary>
        </member>
        <member name="P:Discore.Voice.MemberSpeakingEventArgs.IsSpeaking">
            <summary>
            Gets whether the user is currently speaking.
            </summary>
        </member>
        <member name="M:Discore.Voice.Net.CircularBuffer.#ctor(System.Int32)">
            <summary>
            Create a new circular buffer
            </summary>
            <param name="size">Max buffer size in bytes</param>
        </member>
        <member name="M:Discore.Voice.Net.CircularBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the buffer
            </summary>
            <param name="data">Data to write</param>
            <param name="offset">Offset into data</param>
            <param name="count">Number of bytes to write</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:Discore.Voice.Net.CircularBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the buffer
            </summary>
            <param name="data">Buffer to read into</param>
            <param name="offset">Offset into read buffer</param>
            <param name="count">Bytes to read</param>
            <returns>Number of bytes actually read</returns>
        </member>
        <member name="P:Discore.Voice.Net.CircularBuffer.MaxLength">
            <summary>
            Maximum length of this circular buffer
            </summary>
        </member>
        <member name="P:Discore.Voice.Net.CircularBuffer.Count">
            <summary>
            Number of bytes currently stored in the circular buffer
            </summary>
        </member>
        <member name="M:Discore.Voice.Net.CircularBuffer.Reset">
            <summary>
            Resets the buffer
            </summary>
        </member>
        <member name="M:Discore.Voice.Net.CircularBuffer.Advance(System.Int32)">
            <summary>
            Advances the buffer, discarding bytes
            </summary>
            <param name="count">Bytes to advance</param>
        </member>
        <member name="F:Discore.Voice.Net.OpusConverter.BitsPerSample">
            <summary> Gets the bit rate of this converter. </summary>
        </member>
        <member name="P:Discore.Voice.Net.OpusConverter.InputSamplingRate">
            <summary> Gets the input sampling rate of this converter. </summary>
        </member>
        <member name="P:Discore.Voice.Net.OpusConverter.InputChannels">
            <summary> Gets the number of channels of this converter. </summary>
        </member>
        <member name="P:Discore.Voice.Net.OpusConverter.FrameLength">
            <summary> Gets the milliseconds per frame. </summary>
        </member>
        <member name="P:Discore.Voice.Net.OpusConverter.SamplesPerFrame">
            <summary> Gets the number of samples per frame. </summary>
        </member>
        <member name="P:Discore.Voice.Net.OpusConverter.FrameSize">
            <summary> Gets the bytes per frame. </summary>
        </member>
        <member name="P:Discore.Voice.Net.OpusConverter.SampleSize">
            <summary> Gets the bytes per sample. </summary>
        </member>
        <member name="P:Discore.Voice.Net.OpusEncoder.BitRate">
            <summary> Gets the bit rate in kbit/s. </summary>
        </member>
        <member name="P:Discore.Voice.Net.OpusEncoder.Application">
            <summary> Gets the coding mode of the encoder. </summary>
        </member>
        <member name="M:Discore.Voice.Net.OpusEncoder.#ctor(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},Discore.Voice.Net.OpusApplication)">
            <summary> Creates a new Opus encoder. </summary>
            <param name="samplingRate">Sampling rate of the input signal (Hz). Supported Values:  8000, 12000, 16000, 24000, or 48000</param>
            <param name="channels">Number of channels in input signal. Supported Values: 1 or 2</param>
            <param name="frameLength">Length, in milliseconds, that each frame takes. Supported Values: 2.5, 5, 10, 20, 40, 60</param>
            <param name="bitrate">Bitrate (kbit/s) used for this encoder. Supported Values: 1-512. Null will use the recommended bitrate. </param>
            <param name="application">Coding mode.</param>
        </member>
        <member name="M:Discore.Voice.Net.OpusEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[])">
            <summary> Produces Opus encoded audio from PCM samples. </summary>
            <param name="input">PCM samples to encode.</param>
            <param name="inputOffset">Offset of the frame in pcmSamples.</param>
            <param name="output">Buffer to store the encoded frame.</param>
            <returns>Length of the frame contained in outputBuffer.</returns>
        </member>
        <member name="M:Discore.Voice.Net.OpusEncoder.SetForwardErrorCorrection(System.Boolean)">
            <summary> Gets or sets whether Forward Error Correction is enabled. </summary>
        </member>
        <member name="M:Discore.Voice.Net.OpusEncoder.SetBitrate(System.Int32)">
            <summary> Gets or sets whether Forward Error Correction is enabled. </summary>
        </member>
        <member name="F:Discore.Voice.Net.VoiceOPCode.Identify">
            <summary>
            C->S Used to begin a voice websocket connection.
            </summary>
        </member>
        <member name="F:Discore.Voice.Net.VoiceOPCode.SelectProtocol">
            <summary>
            Used to select the voice protocol.
            </summary>
        </member>
        <member name="F:Discore.Voice.Net.VoiceOPCode.Ready">
            <summary>
            Used to complete the websocket handshake.
            </summary>
        </member>
        <member name="F:Discore.Voice.Net.VoiceOPCode.Heartbeat">
            <summary>
            Used to keep the websocket connection alive.
            </summary>
        </member>
        <member name="F:Discore.Voice.Net.VoiceOPCode.SessionDescription">
            <summary>
            Used to describe the session.
            </summary>
        </member>
        <member name="F:Discore.Voice.Net.VoiceOPCode.Speaking">
            <summary>
            Used to indicate which users are speaking.
            </summary>
        </member>
        <member name="P:Discore.Voice.Net.VoiceSpeakingEventArgs.Ssrc">
            <summary>
            The user's SSRC.
            </summary>
        </member>
        <member name="T:Discore.Voice.Net.VoiceUdpSocket">
                 * REUSABILITY:
                 * This class is mostly reusable already, the only part missing is gauranteeing that
                 * the send/receive tasks have completed before initiating a new connection. Currently,
                 * neither is waited for when disconnecting as there is no way to cancel a send/receive
                 * operation on a System.Net.Sockets.Socket yet.
                *
        </member>
        <member name="M:Discore.Voice.Net.VoiceUdpSocket.ConnectAsync(System.String,System.Int32)">
            <exception cref="T:System.ArgumentException">Thrown if the host resolved into zero addresses.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is already connected.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown if the host fails to resolve or the socket fails to connect.</exception>
        </member>
        <member name="M:Discore.Voice.Net.VoiceUdpSocket.Start(System.Byte[])">
            <summary>
            Initializes the UDP send loop.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Discore.Voice.Net.VoiceUdpSocket.SendData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified data to a buffer to be sent over the UDP socket.
            </summary>
        </member>
        <member name="M:Discore.Voice.Net.VoiceUdpSocket.CanSendData(System.Int32)">
            <summary>
            Gets whether the specified number of bytes is free in the buffer.
            </summary>
        </member>
        <member name="M:Discore.Voice.Net.VoiceUdpSocket.ClearVoiceBuffer">
            <summary>
            Clears the buffer.
            </summary>
        </member>
        <member name="M:Discore.Voice.Net.VoiceUdpSocket.StartIPDiscoveryAsync">
            <exception cref="T:System.Net.Sockets.SocketException">Thrown if the socket encounters an error while sending data.</exception>
        </member>
        <member name="E:Discore.Voice.Net.VoiceWebSocket.OnUnexpectedClose">
            <summary>
            Called when the socket is closed unexpectedly (meaing our side did not initiate it).
            </summary>
        </member>
        <member name="E:Discore.Voice.Net.VoiceWebSocket.OnTimedOut">
            <summary>
            Called when the socket is still connected but the heartbeat loop timed out.
            </summary>
        </member>
        <member name="E:Discore.Voice.Net.VoiceWebSocket.OnUserSpeaking">
            <summary>
            Called when the speaking state of another user in the voice channel changes.
            </summary>
        </member>
        <member name="E:Discore.Voice.Net.VoiceWebSocket.OnNewSessionRequested">
            <summary>
            Called when the socket encountered an event requiring a new session.
            </summary>
        </member>
        <member name="E:Discore.Voice.Net.VoiceWebSocket.OnResumeRequested">
            <summary>
            Called when the socket encountered an event requiring a resume.
            </summary>
        </member>
        <member name="M:Discore.Voice.Net.VoiceWebSocket.DisconnectAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"></exception>
            <exception cref="T:System.Net.WebSockets.WebSocketException">Thrown if the socket is not in a valid state to be closed.</exception>
        </member>
        <member name="M:Discore.Voice.Net.VoiceWebSocket.SendPayload(Discore.Voice.Net.VoiceOPCode,Discore.DiscordApiData)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
            <exception cref="T:Newtonsoft.Json.JsonWriterException">Thrown if the given data cannot be serialized as JSON.</exception>
        </member>
        <member name="M:Discore.Voice.Net.VoiceWebSocket.SendHeartbeatPayload">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="M:Discore.Voice.Net.VoiceWebSocket.SendIdentifyPayload(Discore.Snowflake,Discore.Snowflake,System.String,System.String)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="M:Discore.Voice.Net.VoiceWebSocket.SendResumePayload(Discore.Snowflake,System.String,System.String)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="M:Discore.Voice.Net.VoiceWebSocket.SendSelectProtocolPayload(System.String,System.Int32,System.String)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="M:Discore.Voice.Net.VoiceWebSocket.SendSpeakingPayload(System.Boolean,System.Int32)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="P:Discore.Voice.ShardVoiceManager.VoiceConnections">
            <summary>
            Gets a list of all voice connections for the current bot.
            </summary>
        </member>
        <member name="M:Discore.Voice.ShardVoiceManager.GetUsersInVoiceChannel(Discore.Snowflake)">
            <summary>
            Gets a list of the IDs of every user currently in the specified voice channel.
            <para>Note: Will return an empty list if the voice channel is not found.</para>
            </summary>
        </member>
        <member name="M:Discore.Voice.ShardVoiceManager.TryGetVoiceConnection(Discore.Snowflake,Discore.Voice.DiscordVoiceConnection@)">
            <summary>
            Attempts to retrieve a voice connection by the guild the connection is in.
            </summary>
        </member>
        <member name="M:Discore.Voice.ShardVoiceManager.CreateOrGetConnection(Discore.Snowflake)">
            <summary>
            Creates a voice connection for the specified guild.
            If a voice connection already exists for the given guild,
            a new connection is not created and the existing one is returned.
            </summary>
        </member>
        <member name="P:Discore.Voice.VoiceConnectionEventArgs.Shard">
            <summary>
            Gets the shard that is managing the voice connection.
            </summary>
        </member>
        <member name="P:Discore.Voice.VoiceConnectionEventArgs.Connection">
            <summary>
            Gets the voice connection that fired the event.
            </summary>
        </member>
        <member name="P:Discore.Voice.VoiceConnectionInvalidatedEventArgs.Reason">
            <summary>
            Gets the reason the voice connection was invalidated.
            </summary>
        </member>
        <member name="P:Discore.Voice.VoiceConnectionInvalidatedEventArgs.ErrorMessage">
            <summary>
            If reason is set to error or timed out, gets a message describing the error that caused the invalidation.
            Otherwise returns null.
            </summary>
        </member>
        <member name="T:Discore.Voice.VoiceConnectionInvalidationReason">
            <summary>
            Reasons for voice connections being invalidated.
            </summary>
        </member>
        <member name="F:Discore.Voice.VoiceConnectionInvalidationReason.Normal">
            <summary>
            The voice connection disconnected normally.
            </summary>
        </member>
        <member name="F:Discore.Voice.VoiceConnectionInvalidationReason.BotRemovedFromGuild">
            <summary>
            The voice connection was disconnected because the bot was removed from the
            guild the voice connection was for.
            </summary>
        </member>
        <member name="F:Discore.Voice.VoiceConnectionInvalidationReason.TimedOut">
            <summary>
            The voice connection timed out while waiting for a response from the Discord API.
            </summary>
        </member>
        <member name="F:Discore.Voice.VoiceConnectionInvalidationReason.Error">
            <summary>
            The voice connection encountered a fatal error.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.DiscordGatewayEventArgs.Shard">
            <summary>
            Gets the shard of the Gateway connection that fired the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.UserEventArgs.User">
            <summary>
            Gets the user associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.TypingStartEventArgs.UserId">
            <summary>
            Gets the ID of the user that started typing.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.TypingStartEventArgs.ChannelId">
            <summary>
            Gets the ID of the text channel that the user starting typing in.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.TypingStartEventArgs.Timestamp">
            <summary>
            Unix time in seconds when the typing started.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildMemberEventArgs.GuildId">
            <summary>
            Gets the ID of the guild the member is in.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildMemberEventArgs.Member">
            <summary>
            Gets the member associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.PresenceEventArgs.Presence">
            <summary>
            Gets the presence state of the user.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildMemberChunkEventArgs.GuildId">
            <summary>
            Gets the ID of the guild that the members are in.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildMemberChunkEventArgs.Members">
            <summary>
            Gets a list of all members included in the chunk.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildUserEventArgs.GuildId">
            <summary>
            Gets the ID of the guild associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildUserEventArgs.User">
            <summary>
            Gets the user associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildRoleEventArgs.Guild">
            <summary>
            Gets the guild that the role is in.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildRoleEventArgs.Role">
            <summary>
            Gets the role associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.DMChannelEventArgs.Channel">
            <summary>
            Gets the DM channel associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildEventArgs.Guild">
            <summary>
            Gets the guild associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildIntegrationsEventArgs.GuildId">
            <summary>
            Gets the ID of the guild that had its integrations updated.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildChannelEventArgs.GuildId">
            <summary>
            Gets the ID of the guild the channel is in.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GuildChannelEventArgs.Channel">
            <summary>
            Gets the guild channel associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.WebhooksUpdateEventArgs.GuildId">
            <summary>
            Gets the ID of the guild that had a webhook updated.
            <para>This is also the ID of the guild that the webhook's channel is in.</para>
            </summary>
        </member>
        <member name="P:Discore.WebSocket.WebhooksUpdateEventArgs.ChannelId">
            <summary>
            Gets the ID of the channel that had a webhook updated.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.ChannelPinsUpdateEventArgs.ChannelId">
            <summary>
            Gets the ID of the text channel that had its pins updated.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.ChannelPinsUpdateEventArgs.LastPinTimestamp">
            <summary>
            Gets the date-time of the newest pin as of this update (or null if there is no longer any pins).
            </summary>
        </member>
        <member name="P:Discore.WebSocket.MessageEventArgs.Message">
            <summary>
            Gets the message associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.MessageUpdateEventArgs.PartialMessage">
            <summary>
            Gets a partial message object representing the changes made to the message.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.MessageDeleteEventArgs.MessageId">
            <summary>
            Gets the ID of the message that was deleted.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.MessageDeleteEventArgs.ChannelId">
            <summary>
            Gets the ID of the channel the message was deleted from.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.MessageReactionEventArgs.MessageId">
            <summary>
            Gets the ID of the message associated with the reaction.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.MessageReactionEventArgs.UserId">
            <summary>
            Gets the ID of the user who added/removed the reaction.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.MessageReactionEventArgs.ChannelId">
            <summary>
            Gets the ID of the channel the message affected is in.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.MessageReactionEventArgs.Emoji">
            <summary>
            Gets the emoji associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.MessageReactionRemoveAllEventArgs.MessageId">
            <summary>
            Gets the ID of the message affected.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.MessageReactionRemoveAllEventArgs.ChannelId">
            <summary>
            Gets the ID of the channel the message is in.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.VoiceStateEventArgs.VoiceState">
            <summary>
            Gets the voice state of the user who's voice state changed.
            </summary>
        </member>
        <member name="T:Discore.WebSocket.DiscordGuildMetadata">
            <summary>
            Shard-specific metadata about a guild.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.DiscordGuildMetadata.GuildId">
            <summary>
            Gets the ID of the guild this metadata is for.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.DiscordGuildMetadata.IsLarge">
            <summary>
            Gets whether the guild is considered to be large.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.DiscordGuildMetadata.JoinedAt">
            <summary>
            Gets the date and time that bot joined the guild.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.DiscordGuildMetadata.MemberCount">
            <summary>
            Gets the total number of members in the guild.
            </summary>
        </member>
        <member name="T:Discore.WebSocket.DiscordShardCache">
            <summary>
            A set of cached entity data for a Discord shard connection.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.IsGuildAvailable(Discore.Snowflake)">
            <summary>
            Returns whether the specified guild is available or false if the guild is not known to this cache.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetAllGuildIds">
            <summary>
            Returns a list of the IDs of all guilds currently in this cache.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetUnavailableGuildIds">
            <summary>
            Returns a list of the IDs of all unavailable guilds currently in this cache.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetGuildMetadata(Discore.Snowflake)">
            <summary>
            Returns the shard-specific metdata for the given guild or null if the guild is not currently cached.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetGuild(Discore.Snowflake)">
            <summary>
            Returns the specified guild or null if it is not currently cached.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetUser(Discore.Snowflake)">
            <summary>
            Returns the specified user or null if they are not currently cached.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetChannel(Discore.Snowflake)">
            <summary>
            Returns the specified channel or null if it is not currently cached.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetDMChannel(Discore.Snowflake)">
            <summary>
            Returns the specified DM channel or, null if it is not currently cached or is not a DM channel.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetGuildChannels(Discore.Snowflake)">
            <summary>
            Returns a list of all channels in the given guild or null if the guild is not currently cached.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetGuildTextChannel(Discore.Snowflake)">
            <summary>
            Returns the specified guild text channel or, null if it is not currently cached or is not a guild text channel.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetGuildVoiceChannel(Discore.Snowflake)">
            <summary>
            Returns the specified guild voice channel or, null if it is not currently cached or is not a guild voice channel.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetGuildCategoryChannel(Discore.Snowflake)">
            <summary>
            Returns the specified guild category channel or, 
            null if it is not currently cached or is not a guild category channel.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetGuildMember(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Returns the specified guild member or,
            null if the member is not currently cached or the guild is not currently cached.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetGuildMembers(Discore.Snowflake)">
            <summary>
            Returns a list of all currently cached members for the given guild, or null if the guild is not currently cached.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetUserPresence(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Returns the presence for the specified user or, 
            null if the presence is not currently cached or the guild is not currently cached.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetUserPresences(Discore.Snowflake)">
            <summary>
            Returns a list of all currently cached user presences for the given guild, 
            or null if the guild is not currently cached.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetVoiceState(Discore.Snowflake,Discore.Snowflake)">
            <summary>
            Returns the voice state for the specified user or, 
            null if the voice state is not currently cached or the guild is not currently cached.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.DiscordShardCache.GetVoiceStates(Discore.Snowflake)">
            <summary>
            Returns a list of all currently cached voice states for the given guild, 
            or null if the guild is not currently cached.
            </summary>
        </member>
        <member name="T:Discore.WebSocket.DiscordWebSocketError">
            <summary>
            Types of errors that trigger a <see cref="T:Discore.WebSocket.DiscordWebSocketException"/>.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.DiscordWebSocketError.Unexpected">
            <summary>
            An unexpected error occured while interacting with the Discord WebSocket API.
            Should never happen, indicates a type of error that should be handled in Discore.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.DiscordWebSocketError.ConnectionClosed">
            <summary>
            The WebSocket connection was closed while sending data.
            </summary>
        </member>
        <member name="T:Discore.WebSocket.DiscordWebSocketException">
            <summary>
            An exception that occurs when interacting with the Discord WebSocket API.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.DiscordWebSocketException.Error">
            <summary>
            Gets the type of error that triggered the exception.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GameOptions.Name">
            <summary>
            The name of the game.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GameOptions.Type">
            <summary>
            The type of the game. Defaults to <see cref="F:Discore.DiscordGameType.Game"/>.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.GameOptions.Url">
            <summary>
            The URL of the stream. <see cref="P:Discore.WebSocket.GameOptions.Type"/> must be <see cref="F:Discore.DiscordGameType.Streaming"/>
            for this to take effect. Defaults to null.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.GameOptions.SetName(System.String)">
            <summary>
            Sets the name of the game.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.GameOptions.SetType(Discore.DiscordGameType)">
            <summary>
            Sets the type of game.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.GameOptions.SetUrl(System.String)">
            <summary>
            Sets the URL of the stream. <see cref="P:Discore.WebSocket.GameOptions.Type"/> must be <see cref="F:Discore.DiscordGameType.Streaming"/>
            for this to take effect.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.IDiscordGateway.Shard">
            <summary>
            Gets the shard that is managing this gateway connection.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnDMChannelCreated">
            <summary>
            Called when a direct message channel is created/opened.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildChannelCreated">
            <summary>
            Called when a (text or voice) guild channel is created.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildChannelUpdated">
            <summary>
            Called when a (text or voice) guild channel is updated.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnDMChannelRemoved">
            <summary>
            Called when a direct message channel is removed/closed.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildChannelRemoved">
            <summary>
            Called when a (text or voice) guild channel is removed.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildCreated">
            <summary>
            Called when this application joins a guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildUpdated">
            <summary>
            Called when a guild is updated.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildRemoved">
            <summary>
            Called when this application is removed from a guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildAvailable">
            <summary>
            Called when a known guild that was unavailable becomes available again.
            (i.e. when the Gateway discovers guilds that the user is in when connecting).
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildUnavailable">
            <summary>
            Called when a known guild to this application becomes unavailable.
            This application was NOT removed from the guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildBanAdded">
            <summary>
            Called when a user is banned from a guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildBanRemoved">
            <summary>
            Called when a user ban is removed from a guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildEmojisUpdated">
            <summary>
            Called when the emojis of a guild are updated.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildIntegrationsUpdated">
            <summary>
            Called when the integrations of a guild are updated.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildMemberAdded">
            <summary>
            Called when a user joins a guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildMemberRemoved">
            <summary>
            Called when a user leaves or gets kicked/banned from a guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildMemberUpdated">
            <summary>
            Called when a member is updated for a specific guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildMembersChunk">
            <summary>
            Called when members are requested for a guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildRoleCreated">
            <summary>
            Called when a role is added to a guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildRoleUpdated">
            <summary>
            Called when a guild role is updated.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnGuildRoleDeleted">
            <summary>
            Called when a role is removed from a guild.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnChannelPinsUpdated">
            <summary>
            Called when a message is pinned or unpinned from a channel.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnMessageCreated">
            <summary>
            Called when a message is created (either from a DM or guild text channel).
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnMessageUpdated">
            <summary>
            Called when a message is updated.
            <para>
            Message contained in this event is only partially filled out!
            The only guaranteed field is the channel the message was sent in.
            </para>
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnMessageDeleted">
            <summary>
            Called when a message is deleted.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnMessageReactionAdded">
            <summary>
            Called when someone reacts to a message.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnMessageReactionRemoved">
            <summary>
            Called when a reaction is removed from a message.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnMessageAllReactionsRemoved">
            <summary>
            Called when all reactions are removed from a message at once.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnWebhookUpdated">
            <summary>
            Called when a webhook is updated.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnPresenceUpdated">
            <summary>
            Called when the presence of a member in a guild is updated.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnTypingStarted">
            <summary>
            Called when a user starts typing.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnUserUpdated">
            <summary>
            Called when a user is updated.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.IDiscordGateway.OnVoiceStateUpdated">
            <summary>
            Called when someone joins/leaves/moves voice channels.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.IDiscordGateway.UpdateStatusAsync(Discore.WebSocket.StatusOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates the status of the bot user.
            <para>Note: This method can only be called 5 times per minute and will wait if this is exceeded.</para>
            <para>
            Note: This method will also throw an <see cref="T:System.OperationCanceledException"/> if the Gateway's shard is stopped while sending.
            </para>
            </summary>
            <param name="options">Options for the new status.</param>
            <param name="cancellationToken">A token used to cancel the update.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the Gateway's shard has not been fully started.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the Gateway's shard has been disposed.</exception>
            <exception cref="T:System.OperationCanceledException">
            Thrown if the cancellation token is cancelled or the Gateway's shard is stopped while sending.
            </exception>
            <remarks>
            This method will wait until the underlying Gateway connection is ready as well as retry if the connection 
            closes unexpectedly until the given cancellation token is cancelled or the Gateway's shard is stopped.
            </remarks>
        </member>
        <member name="M:Discore.WebSocket.IDiscordGateway.RequestGuildMembersAsync(Discore.Snowflake,System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Requests guild members from the Discord API, this can be used to retrieve offline members in a guild that is considered 
            "large". "Large" guilds will not automatically have the offline members available.
            <para>
            Members requested here will be available through the <see cref="E:Discore.WebSocket.IDiscordGateway.OnGuildMembersChunk"/> event.
            </para>
            <para>
            Note: This method will also throw an <see cref="T:System.OperationCanceledException"/> if the Gateway's shard is stopped while sending.
            </para>
            </summary>
            <param name="guildId">The ID of the guild to retrieve members from.</param>
            <param name="query">Case-insensitive string that the username starts with, or an empty string to request all members.</param>
            <param name="limit">Maximum number of members to retrieve or 0 to request all members matched.</param>
            <param name="cancellationToken">A token used to cancel the request.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the Gateway's shard has not been fully started.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the Gateway's shard has been disposed.</exception>
            <exception cref="T:System.OperationCanceledException">
            Thrown if the cancellation token is cancelled or the Gateway's shard is stopped while sending.
            </exception>
            <remarks>
            This method will wait until the underlying Gateway connection is ready as well as retry if the connection 
            closes unexpectedly until the given cancellation token is cancelled or the Gateway's shard is stopped.
            </remarks>
        </member>
        <member name="M:Discore.WebSocket.MutableEntity.Reference(Discore.WebSocket.MutableEntity)">
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Discore.WebSocket.MutableEntity`1.ImmutableEntity">
            <summary>
            Note: Will return null if the immutable entity has not been built and the entity is not dirty.
            </summary>
        </member>
        <member name="T:Discore.WebSocket.Net.DiscordClientWebSocket">
                 * REUSABILITY:
                 * Any object inheriting this class CANNOT be reused. Once one connection attempt has
                 * taken place, a new instance will need to be created to try again.
                 * 
                 * This is due to the fact that System.Net.WebSockets.ClientWebSocket will never re-enter
                 * the 'None' state, which is the only valid state for starting a connection.
                 * 
                 * CANCELLATION TOKENS:
                 * Cancelling any token passed to this class will ABORT the entire socket and cancel
                 * all pending IO operations.
                *
        </member>
        <member name="F:Discore.WebSocket.Net.DiscordClientWebSocket.INTERNAL_CLIENT_ERROR">
            <summary>
            Custom error (not specified by Discord or WebSocket spec) to use when the client needs to disconnect
            due to an error on our end.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.Net.DiscordClientWebSocket.IsConnected">
            <summary>
            Gets whether the socket is currently connected.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.Net.DiscordClientWebSocket.CanBeDisconnected">
            <summary>
            Gets whether the socket is in a state that can be disconnected.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.Net.DiscordClientWebSocket.OnPayloadReceived(Discore.DiscordApiData)">
            <summary>
            Called when a payload has been received successfully.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.Net.DiscordClientWebSocket.OnCloseReceived(System.Net.WebSockets.WebSocketCloseStatus,System.String)">
            <summary>
            Called when a close message has been received. 
            The socket will be gracefully closed automatically before this call.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.Net.DiscordClientWebSocket.OnClosedPrematurely">
            <summary>
            Called when either the socket closes or the receive task ends unexpectedly.
            The socket may or may not be open when this is called.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.Net.DiscordClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
            <param name="cancellationToken">Token that when cancelled will abort the entire socket.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="uri"/> does not start with ws:// or wss://.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="uri"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the socket attempts to start after a first time. A WebSocket instance
            can only be used for one connection attempt.
            </exception>
            <exception cref="T:System.OperationCanceledException"></exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this socket has already been disposed.</exception>
            <exception cref="T:System.Net.WebSockets.WebSocketException">Thrown if the socket fails to connect.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.DiscordClientWebSocket.DisconnectAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
            This task will deadlock (for 5s then abort the socket) if called from the same thread as the receive loop!
            </summary>
            <param name="cancellationToken">Token that when cancelled will abort the entire socket.</param>
            <exception cref="T:System.OperationCanceledException"></exception>
            <exception cref="T:System.Net.WebSockets.WebSocketException">Thrown if the socket is not in a valid state to be closed.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.DiscordClientWebSocket.SendAsync(Discore.DiscordApiData)">
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
            <exception cref="T:Newtonsoft.Json.JsonWriterException">Thrown if the given data cannot be serialized as JSON.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.DiscordClientWebSocket.SendData(System.Byte[])">
            <exception cref="T:System.InvalidOperationException">Thrown if socket is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the socket is disposed before or while sending.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the socket is aborted while sending.</exception>
            <exception cref="T:System.Net.WebSockets.WebSocketException">Thrown if the underlying socket stream is closed.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.DiscordClientWebSocket.ParseMessage(System.Net.WebSockets.WebSocketMessageType,System.IO.MemoryStream)">
            <summary>
            Parses the message received by the WebSocket.
            </summary>
            <param name="messageType">The type of message received.</param>
            <param name="ms">The stream containing the actual message.</param>
            <exception cref="T:System.ArgumentException">Thrown if message type is 'Close' or an unknown type.</exception>
            <exception cref="T:System.IO.IOException">Thrown if the binary message could not be decompressed.</exception>
        </member>
        <member name="F:Discore.WebSocket.Net.Gateway.state">
            <summary>
            State to be tracked only for the public API of this class.
            This does not represent the state of the underlying socket.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.Net.Gateway.isConnectionResuming">
            <summary>
            Whether the next HELLO payload should be responded to with a RESUME, otherwise IDENTIFY.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.Net.Gateway.connectTaskCancellationSource">
            <summary>
            Used to cancel the connect task when it is started automatically (i.e. not from public ConnectAsync).
            </summary>
        </member>
        <member name="F:Discore.WebSocket.Net.Gateway.handshakeCompleteCancellationSource">
            <summary>
            Used to cancel operations that wait for the handshakeCompleteEvent.
            Cancellation occurs when the Gateway is disconnected publicly (i.e. not from a socket error).
            </summary>
        </member>
        <member name="F:Discore.WebSocket.Net.Gateway.nextConnectionDelayMs">
            <summary>
            Milliseconds to wait before attempting the next socket connection. Will be reset after wait completes.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.Net.Gateway.UpdateStatusAsync(Discore.WebSocket.StatusOptions,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.OperationCanceledException">
            Thrown if the cancellation token is cancelled or the gateway connection is closed while sending.
            </exception>
        </member>
        <member name="M:Discore.WebSocket.Net.Gateway.RequestGuildMembersAsync(Discore.Snowflake,System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.OperationCanceledException">
            Thrown if the cancellation token is cancelled or the gateway connection is closed while sending.
            </exception>
        </member>
        <member name="M:Discore.WebSocket.Net.Gateway.SendVoiceStateUpdatePayload(Discore.Snowflake,System.Nullable{Discore.Snowflake},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException">Thrown if the gateway connection is closed while sending.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.Gateway.RepeatTrySendPayload(System.Threading.CancellationToken,System.String,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Continuously retries to call the specified callback (which should only be a payload send).
            <para>
            Retries if the callback throws a InvalidOperationException or DiscordWebSocketException.
            Also waits for the gateway connection to be ready before calling the callback.
            </para>
            </summary>
            <exception cref="T:System.OperationCanceledException">
            Thrown if the cancellation token is cancelled or the gateway connection is closed while sending.
            </exception>
        </member>
        <member name="M:Discore.WebSocket.Net.Gateway.ConnectAsync(Discore.WebSocket.ShardStartConfig,System.Threading.CancellationToken)">
            <exception cref="T:Discore.WebSocket.Net.GatewayHandshakeException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Discore.WebSocket.Net.Gateway.DisconnectAsync">
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Discore.WebSocket.Net.Gateway.FullDisconnect">
            <summary>
            Warning: Do not call from the context of the connect loop! A deadlock will occur!
            </summary>
        </member>
        <member name="M:Discore.WebSocket.Net.Gateway.ConnectLoop(System.Boolean,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:Discore.WebSocket.Net.Gateway.UpdateMemberVoiceState(Discore.Voice.DiscordVoiceState)">
            <summary>
            Handles updating the cache list of members connected to voice channels, as well as updating the voice state.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.Net.GatewayCloseCode.InvalidSession">
            <summary>
            NOTE: this is not currently documented (as of gateway v5).
            </summary>
        </member>
        <member name="M:Discore.WebSocket.Net.GatewayRateLimiter.Invoke(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Counts for one invocation of whatever this rate limiter represents.
            Will block the current thread until the specified time passes if there has been too many invocations.
            </summary>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="E:Discore.WebSocket.Net.GatewaySocket.OnDispatch">
            <summary>
            Called when a dispatch payload is received.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.Net.GatewaySocket.OnReconnectionRequired">
            <summary>
            Called when the socket has disconnected and requires reconnection.
            The argument specifies whether a new session is required.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.Net.GatewaySocket.OnFatalDisconnection">
            <summary>
            Called when the socket has disconnected with a code specifying that
            we cannot saftely reconnect.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.Net.GatewaySocket.OnHello">
            <summary>
            Called when the socket receives the HELLO payload.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.Net.GatewaySocket.receivedHello">
            <summary>
            The gateway is known to send more than one HELLO payload occasionally,
            this is used to ensure we don't respond to it more than once on accident.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.Net.GatewaySocket.SendPayload(Discore.WebSocket.Net.GatewayOPCode,Discore.DiscordApiData)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
            <exception cref="T:Newtonsoft.Json.JsonWriterException">Thrown if the given data cannot be serialized as JSON.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.GatewaySocket.SendHeartbeatPayload">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.GatewaySocket.SendIdentifyPayload(System.String,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.GatewaySocket.SendResumePayload(System.String,System.String,System.Int32)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.GatewaySocket.SendStatusUpdate(Discore.WebSocket.StatusOptions)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.GatewaySocket.SendRequestGuildMembersPayload(Discore.Snowflake,System.String,System.Int32)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="M:Discore.WebSocket.Net.GatewaySocket.SendVoiceStateUpdatePayload(Discore.Snowflake,System.Nullable{Discore.Snowflake},System.Boolean,System.Boolean)">
            <exception cref="T:Discore.WebSocket.DiscordWebSocketException">Thrown if the payload fails to send because of a WebSocket error.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the socket is not connected.</exception>
        </member>
        <member name="P:Discore.WebSocket.Shard.Id">
            <summary>
            Gets the ID of this shard.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.Shard.IsRunning">
            <summary>
            Gets whether this shard is currently running.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.Shard.OnConnected">
            <summary>
            Called when this shard first connects to the Discord Gateway.
            </summary>
        </member>
        <member name="E:Discore.WebSocket.Shard.OnReconnected">
            <summary>
            Called when the internal connection of this shard reconnected to the Discord Gateway.
            <para>
            This can be used to reset things such as the user status,
            which is cleared when a new session has been created.
            </para>
            </summary>
        </member>
        <member name="E:Discore.WebSocket.Shard.OnFailure">
            <summary> 
            Called when this shard fails and cannot reconnect due to the error. 
            </summary> 
        </member>
        <member name="P:Discore.WebSocket.Shard.Cache">
            <summary>
            Gets the local memory cache of data from the Discord API.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.Shard.UserId">
            <summary>
            Gets the ID of the user used to authenticate this shard connection.
            Or null if the gateway is not currently connected.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.Shard.Gateway">
            <summary>
            Gets the gateway manager for this shard.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.Shard.Voice">
            <summary>
            Gets the voice manager for this shard.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.Shard.StartAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Starts this shard. 
            The returned task only finishes once the gateway successfully connects (or is canceled), 
            and will continue to retry until then.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this shard has already been started.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this shard has been disposed.</exception>
            <exception cref="T:System.OperationCanceledException"></exception>
            <exception cref="T:Discore.WebSocket.ShardStartException">Thrown if the shard fails to start.</exception>
        </member>
        <member name="M:Discore.WebSocket.Shard.StartAsync(Discore.WebSocket.ShardStartConfig,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Starts this shard. 
            The returned task only finishes once the gateway successfully connects (or is canceled), 
            and will continue to retry until then.
            </summary>
            <param name="config">A set of options to use when starting the shard.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if config is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this shard has already been started.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this shard has been disposed.</exception>
            <exception cref="T:System.OperationCanceledException"></exception>
            <exception cref="T:Discore.WebSocket.ShardStartException">Thrown if the shard fails to start.</exception>
        </member>
        <member name="M:Discore.WebSocket.Shard.StopAsync">
            <summary>
            Stop this shard.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this shard is not running.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this shard has been disposed.</exception>
        </member>
        <member name="M:Discore.WebSocket.Shard.WaitUntilStoppedAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Returns a task that completes when this shard is stopped either normally or from an error.
            </summary>
            <param name="cancellationToken">A token to cancel the wait. Will not close the shard on cancellation.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the passed cancellation token is cancelled.</exception>
        </member>
        <member name="P:Discore.WebSocket.ShardEventArgs.Shard">
            <summary>
            Gets the shard associated with the event.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.ShardReconnectedEventArgs.IsNewSession">
            <summary>
            Gets whether the shard created a new session.
            A new session means that the bot's user status may have been reset,
            and the cache has been cleared.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.ShardFailureEventArgs.Reason">
            <summary>
            Gets the reason as to why the shard failed.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.ShardFailureEventArgs.Message">
            <summary>
            Gets a message describing the reason the shard failed.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.ShardFailureEventArgs.Exception">
            <summary>
            If available, gets the exception that sparked the failure.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.ShardFailureReason.Unknown">
            <summary>
            Should be reported to the Discore developers if received.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.ShardFailureReason.IOError">
            <summary>
            An IO error occured while the shard was attempting to connect.
            This is most likely due to permission issues when Discore attempts to
            access discore-local-storage.json.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.ShardFailureReason.ShardInvalid">
            <summary>
            The shard was invalid, given the sharding settings for the application.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.ShardFailureReason.AuthenticationFailed">
            <summary>
            The shard failed to authenticate with the Discord Gateway WebSocket API.
            </summary>
        </member>
        <member name="F:Discore.WebSocket.ShardFailureReason.ShardingRequired">
            <summary>
            Occurs if only one shard is used, and that shard would have handled too many guilds.
            More than one shard is required if this happens.
            </summary>
        </member>
        <member name="T:Discore.WebSocket.ShardStartConfig">
            <summary>
            A set of options to use when starting a shard.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.ShardStartConfig.GatewayLargeThreshold">
            <summary>
            Gets or sets a value between 50 and 250, which represents the number of members
            where the Gateway will consider a guild to be "large". Default: 250.
            <para>
            "Large" guilds will not have their offline members immediately available, 
            and instead must be requested.
            </para>
            </summary>
        </member>
        <member name="P:Discore.WebSocket.ShardStartException.Shard">
            <summary>
            Gets the shard that failed to start.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.ShardStartException.Reason">
            <summary>
            Gets the reason describing why the shard failed to start.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.StatusOptions.Status">
            <summary>
            The status of the bot. Defaults to <see cref="F:Discore.DiscordUserStatus.Online"/>.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.StatusOptions.Afk">
            <summary>
            Whether the bot is AFK. Defaults to false.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.StatusOptions.AfkSince">
            <summary>
            Unix time (in milliseconds) of when the bot went idle,
            or null if the bot is not idle. Defaults to null.
            </summary>
        </member>
        <member name="P:Discore.WebSocket.StatusOptions.Game">
            <summary>
            The "game" the bot is currently playing, or null if the bot
            is not "playing" anything. Defaults to null.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.StatusOptions.SetStatus(Discore.DiscordUserStatus)">
            <summary>
            Sets the status of the bot.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.StatusOptions.SetAfk(System.Boolean)">
            <summary>
            Sets whether the bot is AFK.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.StatusOptions.SetAfkSince(System.Nullable{System.Int32})">
            <summary>
            Sets the unix time (in milliseconds) of when the bot went idle,
            or null if the bot is not idle.
            </summary>
        </member>
        <member name="M:Discore.WebSocket.StatusOptions.SetGame(Discore.WebSocket.GameOptions)">
            <summary>
            Sets the "game" the bot is currently playing, or null if the bot
            is not "playing" anything.
            </summary>
        </member>
    </members>
</doc>
